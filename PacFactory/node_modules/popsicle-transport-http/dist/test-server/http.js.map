{"version":3,"file":"http.js","sourceRoot":"","sources":["../../src/test-server/http.ts"],"names":[],"mappings":";;;AAAA,+BAAqE;AACrE,2BAAsC;AACtC,6BAA0B;AAC1B,iCAAwD;AACxD,2BAAkC;AAClC,+BAA4B;AAE5B,MAAM,GAAG,GAAG,CAAC,GAAoB,EAAE,GAAmB,EAAE,EAAE;;IACxD,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,MAAA,GAAG,CAAC,GAAG,mCAAI,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAEvD,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,EAAE;QAC5B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACtD,IAAI,KAAK;gBAAE,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACtC;QACD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,OAAO;KACR;IAED,IAAI,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QACtC,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,GAAG,CAAC,GAAG,EAAE,CAAC;QACV,OAAO;KACR;IAED,IAAI,GAAG,CAAC,QAAQ,KAAK,UAAU,EAAE;QAC/B,qBAAgB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO;KACR;IAED,IAAI,GAAG,CAAC,QAAQ,KAAK,WAAW,EAAE;QAChC,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACpC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEpB,UAAU,CAAC;YACT,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpB,GAAG,CAAC,GAAG,EAAE,CAAC;QACZ,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,OAAO;KACR;IAED,IAAI,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;QAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO;KACR;IAED,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC7B,GAAG,CAAC,OAAO,EAAE,CAAC;QACd,OAAO;KACR;IAED,IAAI,GAAG,CAAC,QAAQ,KAAK,UAAU,EAAE;QAC/B,OAAO;KACR;IAED,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACnB,OAAO;AACT,CAAC,CAAC;AAEW,QAAA,MAAM,GAAG,mBAAY,CAAC,GAAG,CAAC,CAAC;AAE3B,QAAA,SAAS,GAAG,oBAAe,CACtC;IACE,GAAG,EAAE,iBAAY,CAAC,WAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;IAC5D,IAAI,EAAE,iBAAY,CAAC,WAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;IAC7D,EAAE,EAAE,iBAAY,CAAC,WAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;CACxD,EACD,GAAG,CACJ,CAAC","sourcesContent":["import { createServer, IncomingMessage, ServerResponse } from \"http\";\nimport { createReadStream } from \"fs\";\nimport { URL } from \"url\";\nimport { createServer as createTlsServer } from \"https\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst app = (req: IncomingMessage, res: ServerResponse) => {\n  const url = new URL(req.url ?? \"\", \"http://localhost\");\n\n  if (url.pathname === \"/echo\") {\n    for (const [key, value] of Object.entries(req.headers)) {\n      if (value) res.setHeader(key, value);\n    }\n    req.pipe(res);\n    return;\n  }\n\n  if (/\\/status\\/\\d+/.test(url.pathname)) {\n    res.statusCode = Number(url.pathname.substr(8));\n    res.end();\n    return;\n  }\n\n  if (url.pathname === \"/urandom\") {\n    createReadStream(\"/dev/urandom\").pipe(res);\n    return;\n  }\n\n  if (url.pathname === \"/download\") {\n    res.setHeader(\"Content-Length\", 12);\n    res.write(\"hello \");\n\n    setTimeout(function () {\n      res.write(\"world!\");\n      res.end();\n    }, 200);\n\n    return;\n  }\n\n  if (url.pathname === \"/url\") {\n    res.end(req.url);\n    return;\n  }\n\n  if (url.pathname === \"/close\") {\n    res.destroy();\n    return;\n  }\n\n  if (url.pathname === \"/timeout\") {\n    return;\n  }\n\n  res.end(\"Success\");\n  return;\n};\n\nexport const server = createServer(app);\n\nexport const tlsServer = createTlsServer(\n  {\n    key: readFileSync(join(__dirname, \"support/server-key.pem\")),\n    cert: readFileSync(join(__dirname, \"support/server-crt.pem\")),\n    ca: readFileSync(join(__dirname, \"support/ca-crt.pem\")),\n  },\n  app\n);\n"]}