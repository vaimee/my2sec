{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AA4BA;;;;;;;GAOG;AACI,MAAM,UAAU,GAAG,CAAO,KAAW,EAAQ,EAAE,CAAC,KAAK,CAAC,CAAC;AAAjD,QAAA,UAAU,cAAuC;AAE9D;;;;;;;;GAQG;AACI,MAAM,WAAW,GAAG,CAAC,KAAY,EAAS,EAAE;IACjD,MAAM,IAAI,SAAS,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;AACpD,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB","sourcesContent":["/**\n * Checks that `Value` is assignable to `Target`.\n *\n * ```ts\n * expectType<TypeOf<number, 123>>(true);\n * expectType<TypeOf<123, number>>(false);\n * ```\n */\nexport type TypeOf<Target, Value> = Exclude<Value, Target> extends never\n  ? true\n  : false;\n\n/**\n * Checks that `Value` is equal to the same type as `Target`.\n *\n * ```ts\n * expectType<TypeEqual<123, 123>>(true);\n * expectType<TypeEqual<123, number>>(false);\n * expectType<TypeEqual<number, 123>>(false);\n * expectType<TypeEqual<number, number>>(true);\n * ```\n */\nexport type TypeEqual<Target, Value> = (<T>() => T extends Target\n  ? 1\n  : 2) extends <T>() => T extends Value ? 1 : 2\n  ? true\n  : false;\n\n/**\n * Asserts the `value` type is assignable to the generic `Type`.\n *\n * ```ts\n * expectType<number>(123);\n * expectType<boolean>(true);\n * ```\n */\nexport const expectType = <Type>(value: Type): void => void 0;\n\n/**\n * Asserts the `value` type is `never`, i.e. this function should never be called.\n * If it is called at runtime, it will throw a `TypeError`. The return type is\n * `never` to support returning in exhaustive type checks.\n *\n * ```ts\n * return expectNever(value);\n * ```\n */\nexport const expectNever = (value: never): never => {\n  throw new TypeError(\"Unexpected value: \" + value);\n};\n"]}