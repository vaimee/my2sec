import Abstract from "../entity/Abstract/Abstract";
import { IEndpoint } from "../entity/Abstract/IEndpoint";
import { Token } from "client-oauth2";
import WP from "../entity/WP/WP";
interface IFetchInit extends Omit<RequestInit, 'body'> {
    body?: BodyInit | object;
}
interface IApiOptions {
}
export default class EntityManager {
    private OAuth;
    private baseUrl;
    private apiOptions;
    token: Token;
    createLogger: () => any;
    constructor(options: {
        baseUrl: string;
        oauthOptions?: any;
        apiOptions?: IApiOptions;
        token?: Token;
        createLogger: () => any;
    });
    fetch(url: string, options?: IFetchInit): Promise<any>;
    get<T extends Abstract>(T: any, id: number | IEndpoint, notify?: boolean): Promise<T>;
    reload<T extends Abstract>(entity: T, notify?: boolean): Promise<T>;
    getMany<T extends Abstract>(T: any, options?: {
        all?: boolean;
        notify?: boolean;
        offset?: number;
        pageSize?: number;
        filters?: Object[];
        sortBy?: string;
        groupBy?: string;
        showSums?: boolean;
    }): Promise<Array<T>>;
    patch<T extends WP>(entity: T, notify?: boolean, fieldPaths?: Array<keyof T['body'] | string>): Promise<T>;
    create<T extends WP>(entity: T): Promise<T>;
    /**
     * validate data
     */
    validate<T extends WP>(entity: T): Promise<T>;
}
export {};
