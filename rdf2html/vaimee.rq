prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix st: <http://ns.inria.fr/sparql-template/>
prefix schema: <http://schema.org/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix vann: <http://purl.org/vocab/vann/>
prefix dct: <http://purl.org/dc/terms/>
prefix : <http://vaimee.it/template#>

template :opo {
	st:call-template(:main, "http://www.vaimee.it/my2sec/ontologies/opo#")
}
where{}

template :jsap {
	st:call-template(:main, "http://www.vaimee.it/ontology/1.0/jsap#")
}
where{}

template :pac {
	st:call-template(:main, "http://www.vaimee.it/ontology/pac/1.0#")
}
where{}

template :sw {
	st:call-template(:main, "http://www.vaimee.it/my2sec/ontologies/sw#")
}
where{}

template :main(?ns) {
    format {
"""
<!DOCTYPE html>
<html>
    <head>
    <meta charset='utf-8'>
    <script src="https://www.w3.org/Tools/respec/respec-w3c" class="remove" defer></script>
    <script class='remove'>
        var respecConfig = {
            specStatus: "ED",
            editors: [%s],
            edDraftURI: "%s",
            shortName: "opo"
        };
    </script>
    <title>%s</title>
    </head>
    <body>
        <section id='abstract'>
            <p>%s</p>
        </section>
        <section id='sotd'>
            <p>
                <em>This document is a work in progress</em>
            </p>
        </section>
        <section>
            <h2>Introduction</h2>

<p>  
</p>
<p>%s</p>
</section>
%s
</body>
</html>
"""
        st:call-template(:editor, ?o)
        ?o
        ?title
        ?desc
        st:call-template(:intro, ?o)
        st:call-template(:axioms, ?o, ?ns)
    }
} where {
    ?o a owl:Ontology ;
    owl:title ?title ;
    dct:abstract ?desc
    
}

#BIND(IRI("http://www.vaimee.it/my2sec/ontologies/opo#") as ?prefix)

## Introduction can be taken from ontology description
template :intro(?o) {?intro} where {?o a owl:Ontology ; dct:description ?intro}

### Editors must be represented as dct:creator or dct:contributor
### Editor details are represented using schema:name schema:affiliation schema:url
template :editor(?o) {
    "{"
    "name:" ?name ","
    "company:" ?company ","
    "companyURL:" ?url
    "}" ; separator = ","
} where {
	VALUES (?name ?company ?url)
    {("Elisa Riforgiato" "VAIMEE" "https://vaimee.it")
    ("Luca Roffia" "VAIMEE" "https://vaimee.it")}
}

#{ ?o dct:creator ?ed } union { ?o dct:contributor ?ed }
#    ?ed schema:name ?name ; schema:affiliation ?org .
#    ?org schema:name ?company ; schema:url ?url .

### Basic structure
template :axioms(?ns ?prefix) {
    "<section>"
        "<h2>Axiomatization</h2>"
        "<section>"
            "<h3>Classes</h3>"
            st:call-template(:classes, ?ns, ?prefix)
        "</section>"
        "<section>"
            "<h3>Object Properties</h3>"
            st:call-template(:properties, ?ns, ?prefix, owl:ObjectProperty)
        "</section>"
        "<section>"
            "<h3>Datatype Properties</h3>"
            st:call-template(:properties, ?ns, ?prefix, owl:DatatypeProperty)
        "</section>"
        st:call-template(:individuals-section, ?ns, ?prefix)
    "</section>"
} where {}

##############
### Classes
##############
template :classes(?ns ?prefix) {
    "<section>"
        st:call-template(:term-header, ?c, ?prefix)
        "<table class=\"def\">"
            "<tbody>"
               st:call-template(:class-superclass, ?c, ?prefix)
                st:call-template(:class-subclasses, ?c, ?prefix)
                st:call-template(:enumeration-members, ?c, ?prefix)
                st:call-template(:class-domain-all, ?c, ?prefix)
                st:call-template(:class-range-all, ?c, ?prefix)
            "</tbody>"
        "</table>"
    "</section>"
} where {
    ?c a owl:Class ;
       rdfs:comment ?desc ;
       rdfs:label ?label
 
} order by ?c      
    
template :class-superclass(?c ?prefix) {
    "<tr>"
        "<td>Sub-class of</td>"
        format {
            "<td>%s</td>"
            st:call-template(:term-link, ?sc, ?prefix)
        }
    "</tr>"
} where {
    ?c rdfs:subClassOf ?sc .
    ?sc a owl:Class .
}

template :class-subclasses(?c ?prefix) {
    "<tr>"
        "<td>Super-class of</td>"
        format {
            "<td>%s</td>"
            st:call-template(:class-subclass, ?c, ?prefix)
        }
    "</tr>"
} where {
    filter exists {
        ?sc rdfs:subClassOf ?c .
        ?sc a owl:Class .
    }
}

template :class-subclass(?c ?prefix) {
    st:call-template(:term-link, ?sc, ?prefix) ; separator = "<br>"
} where {
    ?sc rdfs:subClassOf ?c .
    ?sc a owl:Class .
} order by ?sc


template :class-domain-all(?c ?prefix) {
    "<tr>"
        "<td>In the domainÂ of</td>"
        "<td>" st:call-template(:class-domain, ?c, ?prefix) "</td>"
    "</tr>"
} where {
    filter exists {
        ?p rdfs:domain ?c .
    }
}

template :class-domain(?c ?prefix) {
    st:call-template(:term-link, ?p, ?prefix) ; separator = "<br>"
} where {
    ?p rdfs:domain ?c .
} order by ?p

template :class-range-all(?c ?prefix) {
    "<tr>"
        "<td>In the range of</td>"
        "<td>" st:call-template(:class-range, ?c, ?prefix) "</td>"
    "</tr>"
} where {
    filter exists {
        ?p rdfs:range ?c .
    }
}

template :class-range(?c ?prefix) {
    st:call-template(:term-link, ?p, ?prefix) ; separator = "<br>"
} where {
    ?p rdfs:range ?c .
} order by ?p

template :enumeration-members(?c ?prefix) {
    "<tr>"
        "<td>Enumeration members</td>"
        "<td>" st:call-template(:enumeration-member, ?c, ?prefix) "</td>"
    "</tr>"
} where {
    ?c owl:equivalentClass ?enum .
    ?enum rdf:type owl:Class .
    ?emum owl:oneOf ?x
}

template :enumeration-member(?c ?prefix) {
    st:call-template(:term-link, ?member, ?prefix) ; separator = "<br>"
} where {
   ?member a owl:NamedIndividual .
   ?member a ?c
} order by ?member

###############
### Properties
###############
template :properties(?ns ?prefix ?type) {
    "<section>"
        st:call-template(:term-header, ?p, ?prefix)
        "<table class=\"def\">"
            "<tbody>"
                st:call-template(:property-domain-all, ?p, ?prefix)
                st:call-template(:property-range-all, ?p, ?prefix)
            "</tbody>"
        "</table>"
    "</section>"
} where {
    ?p a ?type ;
       rdfs:comment ?desc ;
       rdfs:label ?label
    
} order by ?p

template :property-domain-all(?p ?prefix) {
    "<tr>"
        "<td>Domain includes</td>"
        format {
            "<td>%s</td>"
            st:call-template(:property-domain, ?p, ?prefix)
        }
    "</tr>"
} where {}

template :property-domain(?p ?prefix) {
    st:call-template(:term-link, ?dom, ?prefix) ; separator = "<br>"
} where {
    { ?p rdfs:domain ?dom }
} order by ?dom

template :property-range-all(?p ?prefix) {
    "<tr>"
        "<td>Range includes</td>"
        format {
            "<td>%s</td>"
            st:call-template(:property-range, ?p, ?prefix)
        }
    "</tr>"
} where {}


template :property-range(?p ?prefix) {
    st:call-template(:term-link, ?range, ?prefix) ; separator = "<br>"
} where {
    { ?p rdfs:range ?range }
} order by ?range

#########################
### Individuals
#########################
template :individuals-section(?ns ?prefix) {
    "<section>"
        "<h3>Named Individuals</h3>"
        st:call-template(:individuals, ?ns, ?prefix)
    "</section>"
} where {
    ?i a owl:NamedIndividual
}

template :individuals(?ns ?prefix) {
    "<section>"
        st:call-template(:term-header, ?i, ?prefix)
        "<table class=\"def\">"
            "<tbody>"
                "<tr>"
                    "<td>Instance of</td>"
                    "<td>" st:call-template(:term-link, ?c, ?prefix) "</td>"
                "</tr>"
            "</tbody>"
        "</table>"
    "</section>"
} where {
    ?i a owl:NamedIndividual .
    ?i a ?c
    filter contains(?c,?prefix)
}

####################
### Terms template
####################
template :term-header(?term ?prefix) {
    format { "<h4>%s</h4>" ?label }
    format { "<p>IRI: <code>%s</code></p>" ?term }
    format { "<span>%s</span>" ?desc }
} where {
    ?term rdfs:comment ?desc
    optional { ?term rdfs:label ?l }
    bind (if(bound(?l), ?l, strafter(str(?term), "#")) as ?label)
}

template :term-link(?term ?defaultPrefix) {
    format {
        "<code><a href=\"%s\">%s</a></code>"
       ?link
       ?label
    }
} where {
	optional{?term rdfs:label ?l}
	bind(if(contains(?term,?defaultPrefix),?l,?term) as ?label)
	bind(if(contains(?term,?defaultPrefix),concat("#", lcase(?l)),?term) as ?link)
}