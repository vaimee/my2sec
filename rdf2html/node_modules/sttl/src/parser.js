/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,15,64,67,74,81,88,93,136,146,149,151,152,161,162,167,332,333,334,335,336],$V1=[1,7],$V2=[6,15],$V3=[17,85,96],$V4=[1,19],$V5=[1,21],$V6=[1,20],$V7=[2,291],$V8=[1,28],$V9=[1,32],$Va=[6,17,20,30,32,33,37,39,43,45,56,65,68,79,85,96,109,112,119,120,121,123,129,145,148,161,162,164,169,196,197,199,202,203,204,222,243,248,250,251,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,341,342,344,345,346,347,348,349,350,351,352,353,354,355,356],$Vb=[6,15,20,48,51,109,112,119,121,123],$Vc=[2,293],$Vd=[1,37],$Ve=[1,39],$Vf=[65,68,318],$Vg=[20,30,33,37,39,43,56,65,68,120,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,351,352,353,354,355,356],$Vh=[32,56],$Vi=[6,15,48,51],$Vj=[1,46],$Vk=[6,15,20,48,51,112,119,121,123],$Vl=[30,56,65,68,120,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$Vm=[2,377],$Vn=[2,369],$Vo=[1,75],$Vp=[1,74],$Vq=[1,72],$Vr=[1,73],$Vs=[1,66],$Vt=[1,71],$Vu=[1,87],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,82],$VA=[1,83],$VB=[2,469],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,88],$VG=[1,89],$VH=[1,92],$VI=[1,93],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,102],$VU=[1,97],$VV=[1,98],$VW=[1,99],$VX=[1,100],$VY=[1,101],$VZ=[6,15,51],$V_=[6,15,20,48,51,119,121,123],$V$=[1,133],$V01=[1,134],$V11=[17,20,123,148,196,197,199,202,203],$V21=[30,56,327],$V31=[1,152],$V41=[1,146],$V51=[1,151],$V61=[1,153],$V71=[1,149],$V81=[1,150],$V91=[30,56,65,68,120,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,351,352,353,354,355,356],$Va1=[2,462],$Vb1=[1,167],$Vc1=[1,168],$Vd1=[1,169],$Ve1=[6,15,17,20,30,32,33,37,39,43,45,48,51,56,65,68,79,109,112,115,116,119,120,121,123,148,196,197,199,202,203,204,250,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,342,345,346,347,348,349,350,351,352,353,354,355,356],$Vf1=[1,176],$Vg1=[1,175],$Vh1=[1,182],$Vi1=[1,181],$Vj1=[17,20,30,32,33,37,39,43,45,56,65,68,79,120,123,129,148,196,197,199,202,203,204,222,243,248,250,251,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,342,345,346,347,348,349,350,351,352,353,354,355,356],$Vk1=[30,204],$Vl1=[17,20,30,32,33,37,39,43,45,56,65,68,79,120,123,129,148,196,197,199,202,203,204,222,243,248,250,251,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,342,345,346,347,348,349,350,351,352,353,354,355,356],$Vm1=[6,15,17,20,30,48,51,56,65,68,120,123,148,196,197,199,202,203,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338],$Vn1=[6,15,20,48,51,123],$Vo1=[6,15,20,30,48,51,65,68,112,119,121,123,283,284,285,287,289,290,292,293,296,298,318,351,352,353,354,355,356],$Vp1=[6,15,17,20,30,48,51,56,65,68,112,115,116,119,120,121,123,148,196,197,199,202,203,204,250,253,254,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338,351,352,353,354,355,356],$Vq1=[6,15,20,30,48,51,56,65,68,109,112,119,121,123,283,284,285,287,289,290,292,293,296,298,318,351,352,353,354,355,356],$Vr1=[6,15,17,20,30,32,33,37,39,43,45,48,51,56,65,68,79,109,112,115,116,119,120,121,123,148,196,197,199,202,203,204,250,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,339,342,345,346,347,348,349,350,351,352,353,354,355,356],$Vs1=[1,216],$Vt1=[1,215],$Vu1=[30,65,68,222,243,248,318],$Vv1=[2,419],$Vw1=[1,222],$Vx1=[17,20,123,148,196,197,199,202,203,338],$Vy1=[17,20,30,32,43,56,65,68,120,123,148,196,197,199,202,203,204,222,243,248,250,251,253,254,286,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338],$Vz1=[20,30,33,37,39,56,65,68,120,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,351,352,353,354,355,356],$VA1=[32,43,79,258,286],$VB1=[32,43,79,258,262,286],$VC1=[32,43,45,79,258,262,266,281,286,312,313,314,315,316,317,345,346,347,348,349,350,351],$VD1=[32,43,45,79,258,262,266,281,286,312,313,314,315,316,317,327,342,345,346,347,348,349,350,351],$VE1=[1,257],$VF1=[30,56,65,68,120,243,281,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,345,351,352,353,354,355,356],$VG1=[30,56,65,68,120,243,281,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,345,351,352,353,354,355,356],$VH1=[20,65,68,120,129,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$VI1=[1,290],$VJ1=[1,287],$VK1=[1,288],$VL1=[17,20,30,56,65,68,120,123,148,196,197,199,202,203,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$VM1=[56,65,68,318],$VN1=[17,20,30,56,65,68,120,123,148,196,197,199,202,203,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338],$VO1=[17,30,56,85,96],$VP1=[2,380],$VQ1=[30,32,56,65,68,120,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$VR1=[17,20,30,32,43,56,65,68,120,123,148,196,197,199,202,203,204,250,251,253,254,286,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338],$VS1=[30,33,37,39,56,65,68,120,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,351,352,353,354,355,356],$VT1=[20,30,37,39,43,56,65,68,120,283,284,285,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,351,352,353,354,355,356],$VU1=[1,335],$VV1=[1,336],$VW1=[20,321],$VX1=[1,356],$VY1=[6,15,20,30,48,51,56,65,68,115,116,119,121,123,283,284,285,287,289,290,292,293,296,298,318,351,352,353,354,355,356],$VZ1=[2,375],$V_1=[30,65,68,222,243,318],$V$1=[20,32,65,68,120,129,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$V02=[20,30],$V12=[17,20,43,123,148,196,197,199,202,203,251,338],$V22=[30,32,56,65,68,120,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,341,342],$V32=[30,32,56,65,68,120,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,341,342,344,345],$V42=[1,447],$V52=[1,448],$V62=[32,65,68,120,129,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],$V72=[32,65,68,222,248,318],$V82=[2,407],$V92=[1,474],$Va2=[1,475],$Vb2=[56,65,68,222,318],$Vc2=[17,20,30,32,43,56,65,68,120,123,148,196,197,199,202,203,204,222,250,251,253,254,286,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,338],$Vd2=[43,56,65,68,222,318];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"WithPrologue":3,"Prologue":4,"WithPrologue_repetition_plus0":5,"EOF":6,"Template":7,"TemplateClause":8,"Template_repetition0":9,"WhereClause":10,"SolutionModifier":11,"Template_option0":12,"Template_option1":13,"Template_repetition1":14,"TEMPLATE":15,"TemplateClause_option0":16,"{":17,"TemplateClause_repetition0":18,"TemplateClause_option1":19,"}":20,"TExpression":21,"TPrimaryExpression":22,"Box":23,"Format":24,"Group":25,"NameArg":26,"iri":27,"NameArg_option0":28,"VarList":29,"(":30,"VarList_repetition0":31,")":32,"GROUP":33,"Group_option0":34,"Group_repetition0":35,"Group_option1":36,"BOX":37,"Box_repetition0":38,"FORMAT":39,"Format_group0":40,"Format_repetition_plus0":41,"Separator":42,";":43,"SEPARATOR":44,"=":45,"String":46,"Pragma":47,"PRAGMA":48,"Pragma_repetition_plus0":49,"Function":50,"FUNCTION":51,"BrackettedExpression":52,"BuiltInCall":53,"FunctionCall":54,"Literal":55,"VAR":56,"QueryOrUpdate":57,"QueryOrUpdate_group0":58,"Prologue_repetition0":59,"Query":60,"Query_group0":61,"Query_option0":62,"BaseDecl":63,"BASE":64,"IRIREF":65,"PrefixDecl":66,"PREFIX":67,"PNAME_NS":68,"SelectQuery":69,"SelectClause":70,"SelectQuery_repetition0":71,"SubSelect":72,"SubSelect_option0":73,"SELECT":74,"SelectClause_option0":75,"SelectClause_group0":76,"SelectClauseItem":77,"Expression":78,"AS":79,"ConstructQuery":80,"CONSTRUCT":81,"ConstructTemplate":82,"ConstructQuery_repetition0":83,"ConstructQuery_repetition1":84,"WHERE":85,"ConstructQuery_option0":86,"DescribeQuery":87,"DESCRIBE":88,"DescribeQuery_group0":89,"DescribeQuery_repetition0":90,"DescribeQuery_option0":91,"AskQuery":92,"ASK":93,"AskQuery_repetition0":94,"DatasetClause":95,"FROM":96,"DatasetClause_option0":97,"WhereClause_option0":98,"GroupGraphPattern":99,"SolutionModifier_option0":100,"SolutionModifier_option1":101,"SolutionModifier_option2":102,"SolutionModifier_option3":103,"GroupClause":104,"BY":105,"GroupClause_repetition_plus0":106,"GroupCondition":107,"HavingClause":108,"HAVING":109,"HavingClause_repetition_plus0":110,"OrderClause":111,"ORDER":112,"OrderClause_repetition_plus0":113,"OrderCondition":114,"ASC":115,"DESC":116,"Constraint":117,"LimitOffsetClauses":118,"LIMIT":119,"INTEGER":120,"OFFSET":121,"ValuesClause":122,"VALUES":123,"InlineData":124,"InlineData_repetition0":125,"InlineData_repetition1":126,"InlineData_repetition2":127,"DataBlockValue":128,"UNDEF":129,"DataBlockValueList":130,"DataBlockValueList_repetition0":131,"Update":132,"Update_repetition0":133,"Update1":134,"Update_option0":135,"LOAD":136,"Update1_option0":137,"Update1_option1":138,"Update1_group0":139,"Update1_option2":140,"GraphRefAll":141,"Update1_group1":142,"Update1_option3":143,"GraphOrDefault":144,"TO":145,"CREATE":146,"Update1_option4":147,"GRAPH":148,"INSERTDATA":149,"QuadPattern":150,"DELETEDATA":151,"DELETEWHERE":152,"Update1_option5":153,"InsertClause":154,"Update1_option6":155,"Update1_repetition0":156,"Update1_option7":157,"DeleteClause":158,"Update1_option8":159,"Update1_repetition1":160,"DELETE":161,"INSERT":162,"UsingClause":163,"USING":164,"UsingClause_option0":165,"WithClause":166,"WITH":167,"IntoGraphClause":168,"INTO":169,"DEFAULT":170,"GraphOrDefault_option0":171,"GraphRefAll_group0":172,"QuadPattern_option0":173,"QuadPattern_repetition0":174,"QuadsNotTriples":175,"QuadsNotTriples_group0":176,"QuadsNotTriples_option0":177,"QuadsNotTriples_option1":178,"QuadsNotTriples_option2":179,"TriplesTemplate":180,"TriplesTemplate_repetition0":181,"TriplesSameSubject":182,"TriplesTemplate_option0":183,"GroupGraphPatternSub":184,"GroupGraphPatternSub_option0":185,"GroupGraphPatternSub_repetition0":186,"GroupGraphPatternSubTail":187,"GraphPatternNotTriples":188,"GroupGraphPatternSubTail_option0":189,"GroupGraphPatternSubTail_option1":190,"TriplesBlock":191,"TriplesBlock_repetition0":192,"TriplesSameSubjectPath":193,"TriplesBlock_option0":194,"GraphPatternNotTriples_repetition0":195,"OPTIONAL":196,"MINUS":197,"GraphPatternNotTriples_group0":198,"SERVICE":199,"GraphPatternNotTriples_option0":200,"GraphPatternNotTriples_group1":201,"FILTER":202,"BIND":203,"NIL":204,"FunctionCall_option0":205,"FunctionCall_repetition0":206,"ExpressionList":207,"ExpressionList_repetition0":208,"ConstructTemplate_option0":209,"ConstructTriples":210,"ConstructTriples_repetition0":211,"ConstructTriples_option0":212,"VarOrTerm":213,"PropertyListNotEmpty":214,"TriplesNode":215,"PropertyList":216,"PropertyList_option0":217,"PropertyListNotEmpty_repetition0":218,"VerbObjectList":219,"Verb":220,"ObjectList":221,"a":222,"ObjectList_repetition0":223,"GraphNode":224,"PropertyListPathNotEmpty":225,"TriplesNodePath":226,"TriplesSameSubjectPath_option0":227,"PropertyListPathNotEmpty_group0":228,"PropertyListPathNotEmpty_repetition0":229,"GraphNodePath":230,"PropertyListPathNotEmpty_repetition1":231,"PropertyListPathNotEmptyTail":232,"PropertyListPathNotEmptyTail_group0":233,"Path":234,"Path_repetition0":235,"PathSequence":236,"PathSequence_repetition0":237,"PathEltOrInverse":238,"PathElt":239,"PathPrimary":240,"PathElt_option0":241,"PathEltOrInverse_option0":242,"!":243,"PathNegatedPropertySet":244,"PathOneInPropertySet":245,"PathNegatedPropertySet_repetition0":246,"PathNegatedPropertySet_option0":247,"^":248,"TriplesNode_repetition_plus0":249,"[":250,"]":251,"TriplesNodePath_repetition_plus0":252,"BLANK_NODE_LABEL":253,"ANON":254,"ConditionalAndExpression":255,"Expression_repetition0":256,"ExpressionTail":257,"||":258,"RelationalExpression":259,"ConditionalAndExpression_repetition0":260,"ConditionalAndExpressionTail":261,"&&":262,"AdditiveExpression":263,"RelationalExpression_group0":264,"RelationalExpression_option0":265,"IN":266,"MultiplicativeExpression":267,"AdditiveExpression_repetition0":268,"AdditiveExpressionTail":269,"AdditiveExpressionTail_group0":270,"NumericLiteralPositive":271,"AdditiveExpressionTail_repetition0":272,"NumericLiteralNegative":273,"AdditiveExpressionTail_repetition1":274,"UnaryExpression":275,"MultiplicativeExpression_repetition0":276,"MultiplicativeExpressionTail":277,"MultiplicativeExpressionTail_group0":278,"UnaryExpression_option0":279,"PrimaryExpression":280,"-":281,"Aggregate":282,"FUNC_ARITY0":283,"FUNC_ARITY1":284,"FUNC_ARITY2":285,",":286,"IF":287,"BuiltInCall_group0":288,"BOUND":289,"BNODE":290,"BuiltInCall_option0":291,"EXISTS":292,"COUNT":293,"Aggregate_option0":294,"Aggregate_group0":295,"FUNC_AGGREGATE":296,"Aggregate_option1":297,"GROUP_CONCAT":298,"Aggregate_option2":299,"Aggregate_option3":300,"GroupConcatSeparator":301,"LANGTAG":302,"^^":303,"DECIMAL":304,"DOUBLE":305,"true":306,"false":307,"STRING_LITERAL1":308,"STRING_LITERAL2":309,"STRING_LITERAL_LONG1":310,"STRING_LITERAL_LONG2":311,"INTEGER_POSITIVE":312,"DECIMAL_POSITIVE":313,"DOUBLE_POSITIVE":314,"INTEGER_NEGATIVE":315,"DECIMAL_NEGATIVE":316,"DOUBLE_NEGATIVE":317,"PNAME_LN":318,"DISTINCT":319,"Group_repetition0_group0":320,"Triple":321,"QueryOrUpdate_group0_option0":322,"Prologue_repetition0_group0":323,"SelectClause_option0_group0":324,"REDUCED":325,"SelectClause_group0_repetition_plus0":326,"*":327,"DescribeQuery_group0_repetition_plus0_group0":328,"DescribeQuery_group0_repetition_plus0":329,"NAMED":330,"SILENT":331,"CLEAR":332,"DROP":333,"ADD":334,"MOVE":335,"COPY":336,"ALL":337,".":338,"UNION":339,"PropertyListNotEmpty_repetition0_repetition_plus0":340,"|":341,"/":342,"PathElt_option0_group0":343,"?":344,"+":345,"!=":346,"<":347,">":348,"<=":349,">=":350,"NOT":351,"CONCAT":352,"COALESCE":353,"SUBSTR":354,"REGEX":355,"REPLACE":356,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",15:"TEMPLATE",17:"{",20:"}",30:"(",32:")",33:"GROUP",37:"BOX",39:"FORMAT",43:";",44:"SEPARATOR",45:"=",48:"PRAGMA",51:"FUNCTION",56:"VAR",64:"BASE",65:"IRIREF",67:"PREFIX",68:"PNAME_NS",74:"SELECT",79:"AS",81:"CONSTRUCT",85:"WHERE",88:"DESCRIBE",93:"ASK",96:"FROM",105:"BY",109:"HAVING",112:"ORDER",115:"ASC",116:"DESC",119:"LIMIT",120:"INTEGER",121:"OFFSET",123:"VALUES",129:"UNDEF",136:"LOAD",145:"TO",146:"CREATE",148:"GRAPH",149:"INSERTDATA",151:"DELETEDATA",152:"DELETEWHERE",161:"DELETE",162:"INSERT",164:"USING",167:"WITH",169:"INTO",170:"DEFAULT",196:"OPTIONAL",197:"MINUS",199:"SERVICE",202:"FILTER",203:"BIND",204:"NIL",222:"a",243:"!",248:"^",250:"[",251:"]",253:"BLANK_NODE_LABEL",254:"ANON",258:"||",262:"&&",266:"IN",281:"-",283:"FUNC_ARITY0",284:"FUNC_ARITY1",285:"FUNC_ARITY2",286:",",287:"IF",289:"BOUND",290:"BNODE",292:"EXISTS",293:"COUNT",296:"FUNC_AGGREGATE",298:"GROUP_CONCAT",302:"LANGTAG",303:"^^",304:"DECIMAL",305:"DOUBLE",306:"true",307:"false",308:"STRING_LITERAL1",309:"STRING_LITERAL2",310:"STRING_LITERAL_LONG1",311:"STRING_LITERAL_LONG2",312:"INTEGER_POSITIVE",313:"DECIMAL_POSITIVE",314:"DOUBLE_POSITIVE",315:"INTEGER_NEGATIVE",316:"DECIMAL_NEGATIVE",317:"DOUBLE_NEGATIVE",318:"PNAME_LN",319:"DISTINCT",321:"Triple",325:"REDUCED",327:"*",330:"NAMED",331:"SILENT",332:"CLEAR",333:"DROP",334:"ADD",335:"MOVE",336:"COPY",337:"ALL",338:".",339:"UNION",341:"|",342:"/",344:"?",345:"+",346:"!=",347:"<",348:">",349:"<=",350:">=",351:"NOT",352:"CONCAT",353:"COALESCE",354:"SUBSTR",355:"REGEX",356:"REPLACE"},
productions_: [0,[3,3],[7,7],[8,6],[21,1],[21,1],[21,1],[21,1],[26,2],[29,3],[25,6],[23,4],[24,5],[42,4],[47,4],[50,6],[22,1],[22,1],[22,1],[22,1],[22,1],[57,3],[4,1],[60,2],[63,2],[66,3],[69,4],[72,4],[70,3],[77,1],[77,5],[80,5],[80,7],[87,5],[92,4],[95,3],[10,2],[11,4],[104,3],[107,1],[107,1],[107,3],[107,5],[107,1],[108,2],[111,3],[114,2],[114,2],[114,1],[114,1],[118,2],[118,2],[118,4],[118,4],[122,2],[124,4],[124,6],[128,1],[128,1],[128,1],[130,3],[132,3],[134,4],[134,3],[134,5],[134,4],[134,2],[134,2],[134,2],[134,6],[134,6],[158,2],[154,2],[163,3],[166,2],[168,3],[144,1],[144,2],[141,2],[141,1],[150,4],[175,7],[180,3],[99,3],[99,3],[184,2],[187,3],[191,3],[188,2],[188,2],[188,2],[188,3],[188,4],[188,2],[188,6],[188,1],[117,1],[117,1],[117,1],[54,2],[54,6],[207,1],[207,4],[82,3],[210,3],[182,2],[182,2],[216,1],[214,2],[219,2],[220,1],[220,1],[220,1],[221,2],[193,2],[193,2],[225,4],[232,1],[232,3],[234,2],[236,2],[239,2],[238,2],[240,1],[240,1],[240,2],[240,3],[244,1],[244,1],[244,4],[245,1],[245,1],[245,2],[245,2],[215,3],[215,3],[226,3],[226,3],[224,1],[224,1],[230,1],[230,1],[213,1],[213,1],[213,1],[213,1],[213,1],[213,1],[78,2],[257,2],[255,2],[261,2],[259,1],[259,3],[259,4],[263,2],[269,2],[269,2],[269,2],[267,2],[277,2],[275,2],[275,2],[275,2],[280,1],[280,1],[280,1],[280,1],[280,1],[280,1],[52,3],[53,1],[53,2],[53,4],[53,6],[53,8],[53,2],[53,4],[53,2],[53,4],[53,3],[282,5],[282,5],[282,6],[301,4],[55,1],[55,2],[55,3],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[46,1],[46,1],[46,1],[46,1],[271,1],[271,1],[271,1],[273,1],[273,1],[273,1],[27,1],[27,1],[27,1],[5,1],[5,2],[9,0],[9,2],[12,0],[12,1],[13,0],[13,1],[14,0],[14,2],[16,0],[16,1],[18,0],[18,2],[19,0],[19,1],[28,0],[28,1],[31,0],[31,2],[34,0],[34,1],[320,1],[320,1],[320,1],[35,0],[35,2],[36,0],[36,1],[38,0],[38,2],[40,1],[40,1],[41,1],[41,2],[49,1],[49,2],[322,0],[322,1],[58,1],[58,1],[323,1],[323,1],[59,0],[59,2],[61,1],[61,1],[61,1],[61,1],[62,0],[62,1],[71,0],[71,2],[73,0],[73,1],[324,1],[324,1],[75,0],[75,1],[326,1],[326,2],[76,1],[76,1],[83,0],[83,2],[84,0],[84,2],[86,0],[86,1],[328,1],[328,1],[329,1],[329,2],[89,1],[89,1],[90,0],[90,2],[91,0],[91,1],[94,0],[94,2],[97,0],[97,1],[98,0],[98,1],[100,0],[100,1],[101,0],[101,1],[102,0],[102,1],[103,0],[103,1],[106,1],[106,2],[110,1],[110,2],[113,1],[113,2],[125,0],[125,2],[126,0],[126,2],[127,0],[127,2],[131,0],[131,2],[133,0],[133,4],[135,0],[135,2],[137,0],[137,1],[138,0],[138,1],[139,1],[139,1],[140,0],[140,1],[142,1],[142,1],[142,1],[143,0],[143,1],[147,0],[147,1],[153,0],[153,1],[155,0],[155,1],[156,0],[156,2],[157,0],[157,1],[159,0],[159,1],[160,0],[160,2],[165,0],[165,1],[171,0],[171,1],[172,1],[172,1],[172,1],[173,0],[173,1],[174,0],[174,2],[176,1],[176,1],[177,0],[177,1],[178,0],[178,1],[179,0],[179,1],[181,0],[181,3],[183,0],[183,1],[185,0],[185,1],[186,0],[186,2],[189,0],[189,1],[190,0],[190,1],[192,0],[192,3],[194,0],[194,1],[195,0],[195,3],[198,1],[198,1],[200,0],[200,1],[201,1],[201,1],[205,0],[205,1],[206,0],[206,3],[208,0],[208,3],[209,0],[209,1],[211,0],[211,3],[212,0],[212,1],[217,0],[217,1],[340,1],[340,2],[218,0],[218,3],[223,0],[223,3],[227,0],[227,1],[228,1],[228,1],[229,0],[229,3],[231,0],[231,2],[233,1],[233,1],[235,0],[235,3],[237,0],[237,3],[343,1],[343,1],[343,1],[241,0],[241,1],[242,0],[242,1],[246,0],[246,3],[247,0],[247,1],[249,1],[249,2],[252,1],[252,2],[256,0],[256,2],[260,0],[260,2],[264,1],[264,1],[264,1],[264,1],[264,1],[264,1],[265,0],[265,1],[268,0],[268,2],[270,1],[270,1],[272,0],[272,2],[274,0],[274,2],[276,0],[276,2],[278,1],[278,1],[279,0],[279,1],[288,1],[288,1],[288,1],[288,1],[288,1],[291,0],[291,1],[294,0],[294,1],[295,1],[295,1],[297,0],[297,1],[299,0],[299,1],[300,0],[300,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0-1].prefixes = Parser.prefixes || {};
      Parser.prefixes = null;
      return $$[$0-1];
    
break;
case 2:
this.$ = extend({ type: 'query' }, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 3:
this.$ = extend({ queryType: 'TEMPLATE', expression: { type: 'functionCall', function: 'http://ns.inria.fr/sparql-template/concat', args: $$[$0-2] } }, $$[$0-4], $$[$0-1]);
break;
case 8:
this.$ = { name: $$[$0-1], parameters: $$[$0] || [] };
break;
case 9:
this.$ = $$[$0-1].map(toVar);
break;
case 10: case 11: case 14: case 15:
this.$ = {} /* TODO */;
break;
case 12:
this.$ = { type: 'format', pattern: $$[$0-2], args: $$[$0-1].map(unprocessed) };
break;
case 13:
this.$ = { separator: $$[$0] };
break;
case 20:
this.$ = { type: 'functionCall', function: 'http://ns.inria.fr/sparql-template/process', args: [toVar($$[$0])] };
break;
case 21:

      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      return $$[$0-1];
    
break;
case 23:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 24:

      Parser.base = resolveIRI($$[$0])
      base = basePath = baseRoot = '';
    
break;
case 25:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 26:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 27:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], { type: 'query' });
break;
case 28:
this.$ = extend({ queryType: 'SELECT', variables: $$[$0] === '*' ? ['*'] : $$[$0] }, $$[$0-1] && ($$[$0-2] = lowercase($$[$0-1]), $$[$0-1] = {}, $$[$0-1][$$[$0-2]] = true, $$[$0-1]));
break;
case 29: case 110: case 142: case 169:
this.$ = toVar($$[$0]);
break;
case 30: case 42:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 31:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 32:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 33:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? ['*'] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 34:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 35: case 73:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 36:
this.$ = { where: $$[$0].patterns };
break;
case 37:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 38:
this.$ = { group: $$[$0] };
break;
case 39: case 40: case 46: case 48:
this.$ = expression($$[$0]);
break;
case 41:
this.$ = expression($$[$0-1]);
break;
case 43: case 49:
this.$ = expression(toVar($$[$0]));
break;
case 44:
this.$ = { having: $$[$0] };
break;
case 45:
this.$ = { order: $$[$0] };
break;
case 47:
this.$ = expression($$[$0], { descending: true });
break;
case 50:
this.$ = { limit:  toInt($$[$0]) };
break;
case 51:
this.$ = { offset: toInt($$[$0]) };
break;
case 52:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 53:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 54:
this.$ = { type: 'values', values: $$[$0] };
break;
case 55:

      $$[$0-3] = toVar($$[$0-3]);
      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 56:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject[$$[$0-4][i]] = values[i];
        return valuesObject;
      });
    
break;
case 59:
this.$ = undefined;
break;
case 60: case 103: case 126: case 170:
this.$ = $$[$0-1];
break;
case 61:
this.$ = { type: 'update', updates: appendTo($$[$0-2], $$[$0-1]) };
break;
case 62:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 63:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 64:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 65:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: $$[$0-1] };
break;
case 66:
this.$ = { updateType: 'insert',      insert: $$[$0] };
break;
case 67:
this.$ = { updateType: 'delete',      delete: $$[$0] };
break;
case 68:
this.$ = { updateType: 'deletewhere', delete: $$[$0] };
break;
case 69:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 70:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 71: case 72: case 75: case 161:
this.$ = $$[$0];
break;
case 74:
this.$ = { graph: $$[$0] };
break;
case 76:
this.$ = { type: 'graph', default: true };
break;
case 77: case 78:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 79:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 80:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 81:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 82: case 87:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 83:
this.$ = { type: 'group', patterns: [ $$[$0-1] ] };
break;
case 84:
this.$ = { type: 'group', patterns: $$[$0-1] };
break;
case 85:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 86:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 88:

      if ($$[$0-1].length)
        this.$ = { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) };
      else
        this.$ = $$[$0];
    
break;
case 89:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 90:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 91:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 92:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 93:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 94:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 99:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 100:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 101: case 117: case 128: case 210: case 216: case 220: case 226: case 233: case 237: case 251: case 259: case 271: case 273: case 283: case 287: case 307: case 309: case 311: case 313: case 315: case 338: case 344: case 355: case 365: case 371: case 377: case 381: case 391: case 393: case 397: case 405: case 407: case 413: case 415: case 419: case 421: case 430: case 438: case 440: case 450: case 454: case 456: case 458:
this.$ = [];
break;
case 102:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 104:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 105: case 114:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 106:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 108:
this.$ = unionAll($$[$0-1], [$$[$0]]);
break;
case 109:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 112: case 124: case 131:
this.$ = RDF_TYPE;
break;
case 113:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 115:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 116:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 118:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 119:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 120:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 121:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 122:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 125: case 132:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 129:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 133:
this.$ = path($$[$0-1], [RDF_TYPE]);
break;
case 134: case 136:
this.$ = createList($$[$0-1]);
break;
case 135: case 137:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 138:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 140:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 146:
this.$ = blank();
break;
case 147:
this.$ = RDF_NIL;
break;
case 148: case 150: case 155: case 159:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 149:
this.$ = ['||', $$[$0]];
break;
case 151:
this.$ = ['&&', $$[$0]];
break;
case 153:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 154:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 156: case 160:
this.$ = [$$[$0-1], $$[$0]];
break;
case 157:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 158:
this.$ = ['-', createOperationTree($$[$0-1].replace('-', ''), $$[$0])];
break;
case 162:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 163:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 172:
this.$ = operation(lowercase($$[$0-1]));
break;
case 173:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 174:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 175:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 176:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 177:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 178:
this.$ = operation($$[$0-1], []);
break;
case 179:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 180:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 181: case 182:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 183:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 184:
this.$ = $$[$0].substr(1, $$[$0].length - 2);
break;
case 186:
this.$ = $$[$0-1] + lowercase($$[$0]);
break;
case 187:
this.$ = $$[$0-2] + '^^' + $$[$0];
break;
case 188: case 202:
this.$ = createLiteral($$[$0], XSD_INTEGER);
break;
case 189: case 203:
this.$ = createLiteral($$[$0], XSD_DECIMAL);
break;
case 190: case 204:
this.$ = createLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 193:
this.$ = XSD_TRUE;
break;
case 194:
this.$ = XSD_FALSE;
break;
case 195: case 196:
this.$ = unescapeString($$[$0], 1);
break;
case 197: case 198:
this.$ = unescapeString($$[$0], 3);
break;
case 199:
this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 200:
this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 201:
this.$ = createLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 205:
this.$ = resolveIRI($$[$0]);
break;
case 206:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 207:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 208: case 241: case 243: case 267: case 279: case 301: case 303: case 305: case 403: case 434: case 436:
this.$ = [$$[$0]];
break;
case 209: case 211: case 217: case 221: case 227: case 234: case 238: case 242: case 244: case 252: case 260: case 268: case 272: case 274: case 280: case 284: case 288: case 302: case 304: case 306: case 308: case 310: case 312: case 314: case 339: case 345: case 356: case 372: case 404: case 416: case 435: case 437: case 439: case 441: case 451: case 455: case 457: case 459:
$$[$0-1].push($$[$0]);
break;
case 316:
$$[$0-3].push($$[$0-2]);
break;
case 366: case 378: case 382: case 392: case 394: case 398: case 406: case 408: case 414: case 420: case 422: case 431:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,251],{3:1,4:2,59:3}),{1:[3]},{5:4,7:5,8:6,15:$V1},o([6,15,74,81,88,93,136,146,149,151,152,161,162,167,332,333,334,335,336],[2,22],{323:8,63:9,66:10,64:[1,11],67:[1,12]}),{6:[1,13],7:14,8:6,15:$V1},o($V2,[2,208]),o($V3,[2,210],{9:15}),{16:16,17:[2,218],26:17,27:18,65:$V4,68:$V5,318:$V6},o($V0,[2,252]),o($V0,[2,249]),o($V0,[2,250]),{65:[1,22]},{68:[1,23]},{1:[2,1]},o($V2,[2,209]),{10:24,17:$V7,85:$V8,95:25,96:[1,27],98:26},{17:[1,29]},{17:[2,219]},{17:[2,224],28:30,29:31,30:$V9},o($Va,[2,205]),o($Va,[2,206]),o($Va,[2,207]),o($V0,[2,24]),{65:[1,33]},o($Vb,$Vc,{11:34,100:35,104:36,33:$Vd}),o($V3,[2,211]),{17:$Ve,99:38},o($Vf,[2,289],{97:40,330:[1,41]}),{17:[2,292]},o($Vg,[2,220],{18:42}),{17:[2,8]},{17:[2,225]},o($Vh,[2,226],{31:43}),o($V0,[2,25]),o($Vi,[2,212],{12:44,122:45,123:$Vj}),o($Vk,[2,295],{101:47,108:48,109:[1,49]}),o($Vb,[2,294]),{105:[1,50]},o([6,15,20,33,48,51,109,112,119,121,123],[2,36]),o($Vl,$Vm,{72:51,184:52,70:53,185:54,191:56,192:57,17:$Vn,20:$Vn,123:$Vn,148:$Vn,196:$Vn,197:$Vn,199:$Vn,202:$Vn,203:$Vn,74:[1,55]}),{27:58,65:$V4,68:$V5,318:$V6},o($Vf,[2,290]),{19:59,20:[2,222],21:60,22:62,23:63,24:64,25:65,27:85,30:$Vo,33:$Vp,37:$Vq,39:$Vr,42:61,43:$Vs,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{32:[1,113],56:[1,114]},o($VZ,[2,214],{13:115,47:116,48:[1,117]}),o($Vi,[2,213]),{30:[1,120],56:[1,119],124:118},o($V_,[2,297],{102:121,111:122,112:[1,123]}),o($Vk,[2,296]),{27:85,30:$Vo,52:126,53:127,54:128,65:$V4,68:$V5,110:124,117:125,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{27:85,30:$V$,53:131,54:132,56:$V01,65:$V4,68:$V5,106:129,107:130,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{20:[1,135]},{20:[1,136]},{10:137,17:$V7,85:$V8,98:26},o($V11,[2,371],{186:138}),o($V21,[2,265],{75:139,324:140,319:[1,141],325:[1,142]}),o($V11,[2,370]),{27:147,30:$V31,46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,193:143,204:$V51,213:144,226:145,250:$V61,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o([6,17,33,85,96,109,112,119,121,123],[2,35]),{20:[1,154]},o($Vg,[2,221]),{20:[2,223]},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{44:[1,155]},o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{17:[1,156]},{17:[1,157]},{17:[2,228],34:158,319:[1,159]},o($V91,$Va1,{78:160,255:161,259:162,263:163,267:164,275:165,279:166,243:$Vb1,281:$Vc1,345:$Vd1}),o($Ve1,[2,171]),{204:[1,170]},{30:[1,171]},{30:[1,172]},{30:[1,173]},{30:$Vf1,204:$Vg1,207:174},{30:[1,177]},{30:[1,179],204:[1,178]},{292:[1,180]},{30:$Vh1,204:$Vi1},o($Vj1,[2,185],{302:[1,183],303:[1,184]}),o($Vj1,[2,188]),o($Vj1,[2,189]),o($Vj1,[2,190]),o($Vj1,[2,191]),o($Vj1,[2,192]),o($Vj1,[2,193]),o($Vj1,[2,194]),{30:[1,185]},{30:[1,186]},{30:[1,187]},o($Vk1,[2,464]),o($Vk1,[2,465]),o($Vk1,[2,466]),o($Vk1,[2,467]),o($Vk1,[2,468]),{292:[2,470]},o($Vl1,[2,195]),o($Vl1,[2,196]),o($Vl1,[2,197]),o($Vl1,[2,198]),o($Vj1,[2,199]),o($Vj1,[2,200]),o($Vj1,[2,201]),o($Vj1,[2,202]),o($Vj1,[2,203]),o($Vj1,[2,204]),{17:[2,9]},o($Vh,[2,227]),o($VZ,[2,216],{14:188}),o($VZ,[2,215]),{17:[1,189]},o($Vm1,[2,54]),{17:[1,190]},o($Vh,[2,309],{126:191}),o($Vn1,[2,299],{103:192,118:193,119:[1,194],121:[1,195]}),o($V_,[2,298]),{105:[1,196]},o($Vk,[2,44],{282:76,288:81,291:84,27:85,52:126,53:127,54:128,117:197,30:$Vo,65:$V4,68:$V5,283:$Vv,284:$Vw,285:$Vx,287:$Vy,289:$Vz,290:$VA,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY}),o($Vo1,[2,303]),o($Vp1,[2,96]),o($Vp1,[2,97]),o($Vp1,[2,98]),o($Vb,[2,38],{282:76,288:81,291:84,27:85,53:131,54:132,107:198,30:$V$,56:$V01,65:$V4,68:$V5,283:$Vv,284:$Vw,285:$Vx,287:$Vy,289:$Vz,290:$VA,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY}),o($Vq1,[2,301]),o($Vq1,[2,39]),o($Vq1,[2,40]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:199,243:$Vb1,281:$Vc1,345:$Vd1}),o($Vq1,[2,43]),o($Vr1,[2,83]),o($Vr1,[2,84]),o($Vb,$Vc,{100:35,104:36,11:200,33:$Vd}),{17:[2,381],20:[2,85],122:210,123:$Vj,148:[1,206],187:201,188:202,195:203,196:[1,204],197:[1,205],199:[1,207],202:[1,208],203:[1,209]},{30:$Vs1,56:$Vt1,76:211,77:214,326:212,327:[1,213]},o($V21,[2,266]),o($V21,[2,263]),o($V21,[2,264]),o($V11,[2,379],{194:217,338:[1,218]}),o($Vu1,$Vv1,{225:219,228:220,234:221,235:223,56:$Vw1}),o($Vx1,[2,409],{228:220,234:221,235:223,227:224,225:225,30:$Vv1,65:$Vv1,68:$Vv1,222:$Vv1,243:$Vv1,248:$Vv1,318:$Vv1,56:$Vw1}),o($Vy1,[2,142]),o($Vy1,[2,143]),o($Vy1,[2,144]),o($Vy1,[2,145]),o($Vy1,[2,146]),o($Vy1,[2,147]),{27:147,30:$V31,46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:228,226:229,230:227,250:$V61,252:226,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($Vu1,$Vv1,{228:220,234:221,235:223,225:230,56:$Vw1}),o($V3,[2,3]),{45:[1,231]},o($Vz1,[2,237],{38:232}),{27:235,40:233,46:86,55:234,65:$V4,68:$V5,120:$Vu,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},{17:[1,236]},{17:[2,229]},{32:[1,237]},o($VA1,[2,438],{256:238}),o($VB1,[2,440],{260:239}),o($VB1,[2,152],{264:240,265:241,45:[1,242],266:[2,448],346:[1,243],347:[1,244],348:[1,245],349:[1,246],350:[1,247],351:[1,248]}),o($VC1,[2,450],{268:249}),o($VD1,[2,458],{276:250}),{27:254,30:$Vo,46:86,52:252,53:253,54:255,55:256,56:$VE1,65:$V4,68:$V5,120:$Vu,271:90,273:91,280:251,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{27:254,30:$Vo,46:86,52:252,53:253,54:255,55:256,56:$VE1,65:$V4,68:$V5,120:$Vu,271:90,273:91,280:258,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{27:254,30:$Vo,46:86,52:252,53:253,54:255,55:256,56:$VE1,65:$V4,68:$V5,120:$Vu,271:90,273:91,280:259,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($V91,[2,463]),o($Ve1,[2,172]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:260,243:$Vb1,281:$Vc1,345:$Vd1}),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:261,243:$Vb1,281:$Vc1,345:$Vd1}),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:262,243:$Vb1,281:$Vc1,345:$Vd1}),o($Ve1,[2,176]),o($Ve1,[2,101]),o($VF1,[2,393],{208:263}),{56:[1,264]},o($Ve1,[2,178]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:265,243:$Vb1,281:$Vc1,345:$Vd1}),{17:$Ve,99:266},o($Ve1,[2,99]),o($VF1,[2,389],{205:267,319:[1,268]}),o($Vj1,[2,186]),{27:269,65:$V4,68:$V5,318:$V6},o($VG1,[2,471],{294:270,319:[1,271]}),o($VF1,[2,475],{297:272,319:[1,273]}),o($VF1,[2,477],{299:274,319:[1,275]}),o($V2,[2,2],{50:276,51:[1,277]}),{49:278,321:[1,279]},o($VH1,[2,307],{125:280}),{32:[1,281],56:[1,282]},o($Vn1,[2,37]),o($Vn1,[2,300]),{120:[1,283]},{120:[1,284]},{27:85,30:$Vo,52:126,53:127,54:128,56:$VI1,65:$V4,68:$V5,113:285,114:286,115:$VJ1,116:$VK1,117:289,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($Vo1,[2,304]),o($Vq1,[2,302]),{32:[1,291],79:[1,292]},{20:[2,261],73:293,122:294,123:$Vj},o($V11,[2,372]),o($VL1,[2,373],{189:295,338:[1,296]}),{17:$Ve,99:297},{17:$Ve,99:298},{17:$Ve,99:299},{27:302,56:[1,301],65:$V4,68:$V5,198:300,318:$V6},o($VM1,[2,385],{200:303,331:[1,304]}),{27:85,30:$Vo,52:126,53:127,54:128,65:$V4,68:$V5,117:305,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{30:[1,306]},o($VN1,[2,95]),o($V3,[2,28]),o($V3,[2,269],{77:307,30:$Vs1,56:$Vt1}),o($V3,[2,270]),o($VO1,[2,267]),o($VO1,[2,29]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:308,243:$Vb1,281:$Vc1,345:$Vd1}),o($V11,[2,87]),o($Vl,[2,378],{17:$VP1,20:$VP1,123:$VP1,148:$VP1,196:$VP1,197:$VP1,199:$VP1,202:$VP1,203:$VP1}),o($Vx1,[2,114]),o($Vl,[2,413],{229:309}),o($Vl,[2,411]),o($Vl,[2,412]),o($Vu1,[2,421],{236:310,237:311}),o($Vx1,[2,115]),o($Vx1,[2,410]),{27:147,30:$V31,32:[1,312],46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:228,226:229,230:313,250:$V61,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($VQ1,[2,436]),o($VR1,[2,140]),o($VR1,[2,141]),{251:[1,314]},{46:315,308:$VJ,309:$VK,310:$VL,311:$VM},{20:[1,316],21:317,22:62,23:63,24:64,25:65,27:85,30:$Vo,33:$Vp,37:$Vq,39:$Vr,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},{21:319,22:62,23:63,24:64,25:65,27:85,30:$Vo,33:$Vp,37:$Vq,39:$Vr,41:318,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($VS1,[2,239]),o($VS1,[2,240]),o($VT1,[2,233],{35:320}),o([6,15,17,20,30,32,33,37,39,43,45,48,51,56,65,68,79,112,115,116,119,120,121,123,148,196,197,199,202,203,204,250,253,254,258,262,266,281,283,284,285,286,287,289,290,292,293,296,298,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,327,338,342,345,346,347,348,349,350,351,352,353,354,355,356],[2,170]),o([32,43,79,286],[2,148],{257:321,258:[1,322]}),o($VA1,[2,150],{261:323,262:[1,324]}),o($V91,$Va1,{267:164,275:165,279:166,263:325,243:$Vb1,281:$Vc1,345:$Vd1}),{266:[1,326]},o($VF1,[2,442]),o($VF1,[2,443]),o($VF1,[2,444]),o($VF1,[2,445]),o($VF1,[2,446]),o($VF1,[2,447]),{266:[2,449]},o([32,43,45,79,258,262,266,286,346,347,348,349,350,351],[2,155],{269:327,270:328,271:329,273:330,281:[1,332],312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,345:[1,331]}),o($VC1,[2,159],{277:333,278:334,327:$VU1,342:$VV1}),o($VD1,[2,161]),o($VD1,[2,164]),o($VD1,[2,165]),o($VD1,[2,166],{30:$Vh1,204:$Vi1}),o($VD1,[2,167]),o($VD1,[2,168]),o($VD1,[2,169]),o($VD1,[2,162]),o($VD1,[2,163]),{32:[1,337]},{286:[1,338]},{286:[1,339]},o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:340,243:$Vb1,281:$Vc1,345:$Vd1}),{32:[1,341]},{32:[1,342]},o($Ve1,[2,180]),o($VF1,[2,391],{206:343}),o($VF1,[2,390]),o($Vj1,[2,187]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,295:344,78:346,243:$Vb1,281:$Vc1,327:[1,345],345:$Vd1}),o($VG1,[2,472]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:347,243:$Vb1,281:$Vc1,345:$Vd1}),o($VF1,[2,476]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:348,243:$Vb1,281:$Vc1,345:$Vd1}),o($VF1,[2,478]),o($VZ,[2,217]),{27:349,65:$V4,68:$V5,318:$V6},{20:[1,350],321:[1,351]},o($VW1,[2,243]),{20:[1,352],27:354,46:86,55:355,65:$V4,68:$V5,120:$Vu,128:353,129:$VX1,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},{17:[1,357]},o($Vh,[2,310]),o($Vn1,[2,50],{121:[1,358]}),o($Vn1,[2,51],{119:[1,359]}),o($V_,[2,45],{282:76,288:81,291:84,27:85,52:126,53:127,54:128,117:289,114:360,30:$Vo,56:$VI1,65:$V4,68:$V5,115:$VJ1,116:$VK1,283:$Vv,284:$Vw,285:$Vx,287:$Vy,289:$Vz,290:$VA,292:$VB,293:$VC,296:$VD,298:$VE,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY}),o($VY1,[2,305]),{30:$Vo,52:361},{30:$Vo,52:362},o($VY1,[2,48]),o($VY1,[2,49]),o($Vq1,[2,41]),{56:[1,363]},{20:[2,27]},{20:[2,262]},o($Vl,$Vm,{192:57,190:364,191:365,17:$VZ1,20:$VZ1,123:$VZ1,148:$VZ1,196:$VZ1,197:$VZ1,199:$VZ1,202:$VZ1,203:$VZ1}),o($VL1,[2,374]),o($VN1,[2,88],{339:[1,366]}),o($VN1,[2,89]),o($VN1,[2,90]),{17:$Ve,99:367},{17:[2,383]},{17:[2,384]},{27:370,56:[1,369],65:$V4,68:$V5,201:368,318:$V6},o($VM1,[2,386]),o($VN1,[2,93]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:371,243:$Vb1,281:$Vc1,345:$Vd1}),o($VO1,[2,268]),{79:[1,372]},{27:147,30:$V31,46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:228,226:229,230:373,250:$V61,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($VQ1,[2,119],{341:[1,374]}),o($V_1,[2,428],{238:375,242:376,248:[1,377]}),o($Vy1,[2,136]),o($VQ1,[2,437]),o($Vy1,[2,137]),{20:[2,13]},o($Vg,[2,11]),o($Vz1,[2,238]),{20:[1,378],21:379,22:62,23:63,24:64,25:65,27:85,30:$Vo,33:$Vp,37:$Vq,39:$Vr,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($Vz1,[2,241]),{20:[2,235],22:383,23:384,24:385,27:85,30:$Vo,36:380,37:$Vq,39:$Vr,42:382,43:$Vs,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,320:381,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($VA1,[2,439]),o($V91,$Va1,{259:162,263:163,267:164,275:165,279:166,255:386,243:$Vb1,281:$Vc1,345:$Vd1}),o($VB1,[2,441]),o($V91,$Va1,{263:163,267:164,275:165,279:166,259:387,243:$Vb1,281:$Vc1,345:$Vd1}),o($VB1,[2,153]),{30:$Vf1,204:$Vg1,207:388},o($VC1,[2,451]),o($V91,$Va1,{275:165,279:166,267:389,243:$Vb1,281:$Vc1,345:$Vd1}),o($VD1,[2,454],{272:390}),o($VD1,[2,456],{274:391}),o($VF1,[2,452]),o($VF1,[2,453]),o($VD1,[2,459]),o($V91,$Va1,{279:166,275:392,243:$Vb1,281:$Vc1,345:$Vd1}),o($VF1,[2,460]),o($VF1,[2,461]),o($Ve1,[2,173]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:393,243:$Vb1,281:$Vc1,345:$Vd1}),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:394,243:$Vb1,281:$Vc1,345:$Vd1}),{32:[1,395],286:[1,396]},o($Ve1,[2,177]),o($Ve1,[2,179]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:397,243:$Vb1,281:$Vc1,345:$Vd1}),{32:[1,398]},{32:[2,473]},{32:[2,474]},{32:[1,399]},{32:[2,479],43:[1,402],300:400,301:401},{29:403,30:$V9},o($VZ,[2,14]),o($VW1,[2,244]),o($Vm1,[2,55]),o($VH1,[2,308]),o($V$1,[2,57]),o($V$1,[2,58]),o($V$1,[2,59]),o($V02,[2,311],{127:404}),{120:[1,405]},{120:[1,406]},o($VY1,[2,306]),o($VY1,[2,46]),o($VY1,[2,47]),{32:[1,407]},o($V11,[2,86]),o($V11,[2,376]),{17:[2,382]},o($VN1,[2,91]),{17:$Ve,99:408},{17:[2,387]},{17:[2,388]},{79:[1,409]},{56:[1,410]},o($V12,[2,415],{231:411,286:[1,412]}),o($Vu1,[2,420]),o([30,32,56,65,68,120,204,250,253,254,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,341],[2,120],{342:[1,413]}),{27:416,30:[1,419],65:$V4,68:$V5,222:[1,417],239:414,240:415,243:[1,418],318:$V6},o($V_1,[2,429]),o($Vg,[2,12]),o($Vz1,[2,242]),{20:[1,420]},o($VT1,[2,234]),{20:[2,236]},o($VT1,[2,230]),o($VT1,[2,231]),o($VT1,[2,232]),o($VA1,[2,149]),o($VB1,[2,151]),o($VB1,[2,154]),o($VC1,[2,156]),o($VC1,[2,157],{278:334,277:421,327:$VU1,342:$VV1}),o($VC1,[2,158],{278:334,277:422,327:$VU1,342:$VV1}),o($VD1,[2,160]),{32:[1,423]},{286:[1,424]},o($Ve1,[2,102]),o($VF1,[2,394]),{32:[1,425],286:[1,426]},o($Ve1,[2,181]),o($Ve1,[2,182]),{32:[1,427]},{32:[2,480]},{44:[1,428]},{17:[1,429]},{20:[1,430],30:[1,432],130:431},o($Vn1,[2,52]),o($Vn1,[2,53]),o($Vq1,[2,42]),o($VN1,[2,92]),{56:[1,433]},{32:[1,434]},o([17,20,123,148,196,197,199,202,203,251,338],[2,116],{232:435,43:[1,436]}),o($Vl,[2,414]),o($Vu1,[2,422]),o($V22,[2,122]),o($V22,[2,426],{241:437,343:438,327:[1,440],344:[1,439],345:[1,441]}),o($V32,[2,123]),o($V32,[2,124]),{27:446,30:[1,445],65:$V4,68:$V5,204:[1,444],222:$V42,244:442,245:443,248:$V52,318:$V6},o($Vu1,$Vv1,{235:223,234:449}),o($Vg,[2,10]),o($VD1,[2,455]),o($VD1,[2,457]),o($Ve1,[2,174]),o($V91,$Va1,{255:161,259:162,263:163,267:164,275:165,279:166,78:450,243:$Vb1,281:$Vc1,345:$Vd1}),o($Ve1,[2,100]),o($VF1,[2,392]),o($Ve1,[2,183]),{45:[1,451]},{22:452,27:85,30:$Vo,46:86,52:67,53:68,54:69,55:70,56:$Vt,65:$V4,68:$V5,120:$Vu,271:90,273:91,282:76,283:$Vv,284:$Vw,285:$Vx,287:$Vy,288:81,289:$Vz,290:$VA,291:84,292:$VB,293:$VC,296:$VD,298:$VE,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6,351:$VT,352:$VU,353:$VV,354:$VW,355:$VX,356:$VY},o($Vm1,[2,56]),o($V02,[2,312]),o($V62,[2,313],{131:453}),{32:[1,454]},o($VO1,[2,30]),o($V12,[2,416]),o($V12,[2,117],{235:223,233:455,234:456,30:$Vv1,65:$Vv1,68:$Vv1,222:$Vv1,243:$Vv1,248:$Vv1,318:$Vv1,56:[1,457]}),o($V22,[2,121]),o($V22,[2,427]),o($V22,[2,423]),o($V22,[2,424]),o($V22,[2,425]),o($V32,[2,125]),o($V32,[2,127]),o($V32,[2,128]),o($V72,[2,430],{246:458}),o($V32,[2,130]),o($V32,[2,131]),{27:459,65:$V4,68:$V5,222:[1,460],318:$V6},{32:[1,461]},{32:[1,462]},{46:463,308:$VJ,309:$VK,310:$VL,311:$VM},{20:[1,464]},{27:354,32:[1,465],46:86,55:355,65:$V4,68:$V5,120:$Vu,128:466,129:$VX1,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($VN1,[2,94]),o($Vl,$V82,{221:467,223:468}),o($Vl,[2,417]),o($Vl,[2,418]),{27:446,32:[2,432],65:$V4,68:$V5,222:$V42,245:470,247:469,248:$V52,318:$V6},o($V32,[2,132]),o($V32,[2,133]),o($V32,[2,126]),o($Ve1,[2,175]),{32:[2,184]},o($VZ,[2,15]),o($V02,[2,60]),o($V62,[2,314]),o($V12,[2,118]),{27:147,30:$V92,46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:472,215:473,224:471,250:$Va2,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},{32:[1,476]},{32:[2,433],341:[1,477]},o($V12,[2,113],{286:[1,478]}),o($VR1,[2,138]),o($VR1,[2,139]),{27:147,30:$V92,46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:472,215:473,224:480,249:479,250:$Va2,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($Vb2,[2,405],{214:481,218:482}),o($V32,[2,129]),o($V72,[2,431]),o($Vl,[2,408]),{27:147,30:$V92,32:[1,483],46:86,55:148,56:$V41,65:$V4,68:$V5,120:$Vu,204:$V51,213:472,215:473,224:484,250:$Va2,253:$V71,254:$V81,271:90,273:91,304:$VF,305:$VG,306:$VH,307:$VI,308:$VJ,309:$VK,310:$VL,311:$VM,312:$VN,313:$VO,314:$VP,315:$VQ,316:$VR,317:$VS,318:$V6},o($VQ1,[2,434]),{251:[1,485]},{27:489,56:[1,488],65:$V4,68:$V5,219:486,220:487,222:[1,490],318:$V6},o($Vc2,[2,134]),o($VQ1,[2,435]),o($Vc2,[2,135]),o([20,148,251,338],[2,108],{340:491,43:[1,492]}),o($Vl,$V82,{223:468,221:493}),o($Vl,[2,110]),o($Vl,[2,111]),o($Vl,[2,112]),o($Vb2,[2,406],{43:[1,494]}),o($Vd2,[2,403]),o([20,43,148,251,338],[2,109]),o($Vd2,[2,404])],
defaultActions: {13:[2,1],17:[2,219],28:[2,292],30:[2,8],31:[2,225],61:[2,223],102:[2,470],113:[2,9],159:[2,229],248:[2,449],293:[2,27],294:[2,262],301:[2,383],302:[2,384],315:[2,13],345:[2,473],346:[2,474],366:[2,382],369:[2,387],370:[2,388],382:[2,236],401:[2,480],463:[2,184]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    STTL parser in the Jison parser generator format.
	Derived from: https://github.com/RubenVerborgh/SPARQL.js
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN;

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (!base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Simplifies groups by merging adjacent BGPs
  function mergeAdjacentBGPs(groups) {
    var merged = [], currentBgp;
    for (var i = 0, group; group = groups[i]; i++) {
      switch (group.type) {
        // Add a BGP's triples to the current BGP
        case 'bgp':
          if (group.triples.length) {
            if (!currentBgp)
              appendTo(merged, currentBgp = group);
            else
              appendAllTo(currentBgp.triples, group.triples);
          }
          break;
        // All other groups break up a BGP
        default:
          // Only add the group if its pattern is non-empty
          if (!group.patterns || group.patterns.length > 0) {
            appendTo(merged, group);
            currentBgp = null;
          }
      }
    }
    return merged;
  }
  
  // if st:process(exp), returns exp
  function unprocessed(exp) {
	  if (exp.type === 'functionCall'
		&& exp.function === 'http://ns.inria.fr/sparql-template/process') {
		  return exp.args[0];
	  } else {
		  return exp;
	  }
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 15
break;
case 2:return 37
break;
case 3:return 39
break;
case 4:return 48
break;
case 5:return 51
break;
case 6:return 64
break;
case 7:return 67
break;
case 8:return 74
break;
case 9:return 319
break;
case 10:return 325
break;
case 11:return 30
break;
case 12:return 79
break;
case 13:return 32
break;
case 14:return 327
break;
case 15:return 81
break;
case 16:return 85
break;
case 17:return 17
break;
case 18:return 20
break;
case 19:return 88
break;
case 20:return 93
break;
case 21:return 96
break;
case 22:return 330
break;
case 23:return 33
break;
case 24:return 105
break;
case 25:return 109
break;
case 26:return 112
break;
case 27:return 115
break;
case 28:return 116
break;
case 29:return 119
break;
case 30:return 121
break;
case 31:return 123
break;
case 32:return 43
break;
case 33:return 136
break;
case 34:return 331
break;
case 35:return 169
break;
case 36:return 332
break;
case 37:return 333
break;
case 38:return 146
break;
case 39:return 334
break;
case 40:return 145
break;
case 41:return 335
break;
case 42:return 336
break;
case 43:return 149
break;
case 44:return 151
break;
case 45:return 152
break;
case 46:return 167
break;
case 47:return 161
break;
case 48:return 162
break;
case 49:return 164
break;
case 50:return 170
break;
case 51:return 148
break;
case 52:return 337
break;
case 53:return 338
break;
case 54:return 196
break;
case 55:return 199
break;
case 56:return 203
break;
case 57:return 129
break;
case 58:return 197
break;
case 59:return 339
break;
case 60:return 202
break;
case 61:return 286
break;
case 62:return 222
break;
case 63:return 341
break;
case 64:return 342
break;
case 65:return 248
break;
case 66:return 344
break;
case 67:return 345
break;
case 68:return 243
break;
case 69:return 250
break;
case 70:return 251
break;
case 71:return 258
break;
case 72:return 262
break;
case 73:return 45
break;
case 74:return 346
break;
case 75:return 347
break;
case 76:return 348
break;
case 77:return 349
break;
case 78:return 350
break;
case 79:return 266
break;
case 80:return 351
break;
case 81:return 281
break;
case 82:return 289
break;
case 83:return 290
break;
case 84:return 283
break;
case 85:return 284
break;
case 86:return 285
break;
case 87:return 352
break;
case 88:return 353
break;
case 89:return 287
break;
case 90:return 355
break;
case 91:return 354
break;
case 92:return 356
break;
case 93:return 292
break;
case 94:return 293
break;
case 95:return 296
break;
case 96:return 298
break;
case 97:return 44
break;
case 98:return 303
break;
case 99:return 306
break;
case 100:return 307
break;
case 101:return 65
break;
case 102:return 68
break;
case 103:return 318
break;
case 104:return 253
break;
case 105:return 56
break;
case 106:return 302
break;
case 107:return 120
break;
case 108:return 304
break;
case 109:return 305
break;
case 110:return 312
break;
case 111:return 313
break;
case 112:return 314
break;
case 113:return 315
break;
case 114:return 316
break;
case 115:return 317
break;
case 116:return 'EXPONENT'
break;
case 117:return 308
break;
case 118:return 309
break;
case 119:return 310
break;
case 120:return 311
break;
case 121:return 204
break;
case 122:return 254
break;
case 123:return 6
break;
case 124:return 'INVALID'
break;
case 125:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:TEMPLATE)/i,/^(?:BOX)/i,/^(?:FORMAT)/i,/^(?:PRAGMA)/i,/^(?:FUNCTION)/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT\s+DATA)/i,/^(?:DELETE\s+DATA)/i,/^(?:DELETE\s+WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true)/i,/^(?:false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:([\?\$]((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}