prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix dct: <http://purl.org/dc/terms/>
prefix schema: <http://schema.org/>
prefix st: <http://ns.inria.fr/sparql-template/>
prefix : <https://github.com/vcharpenay/sttl.js/#>

# generates a one-page HTML documentation for a schema.org vocabulary

template :main {
    format {
"""
<!DOCTYPE html>
<html>
    <head>
        <title>Schema.org</title>
        <meta charset="utf-8">
        <style>
            body {
                font-family: monospace;
            }

            #side-panel {
                position: fixed;
                left: 0;
                top: 0;
                bottom: 0;
                width: 40%;
                padding: 10px;
                overflow: scroll;
            }

            #main-panel {
                position: fixed;
                left: calc(40% + 20px);
                top: 0;
                bottom: 0;
                right: 0;
                padding: 10px;
                overflow: scroll;
            }
        </style>
    </head>

    <body>
        <div id="side-panel">
            <h2>%s</h2>
            <input id="filter" type="text">
            %s
        </div>

        <div id="main-panel">
            %s
        </div>

        <script>
            function update() {
                let defs = document.getElementsByClassName('def');
                for (let i = 0; i < defs.length; i++) {
                    defs[i].style.display = 'none';
                }

                let id = location.hash.substring(1);
                if (id) {
                    let def = document.getElementById(id);
                    def.style.display = 'block';
                }
            }

            function filter() {
                let f = document.getElementById('filter');
                let text = new RegExp(f.value, 'i');

                let items = document.getElementsByClassName('toc');
                for (let i = 0; i < items.length; i++) {
                    let item = items[i];
                    if (!text.test(item.textContent)) item.style.display = 'none';
                    else item.style.display = 'list-item';
                }
            }

            window.onhashchange = update;
            document.getElementById('filter').onkeyup = filter;

            update();
            filter();
        </script>
    </body>
</html>
"""
        st:call-template(:title)
        st:call-template(:hierarchy)
        st:call-template(:definitions)
    }
} where {}

template :title {
    format { "%s" ?title }
} where {
    ?onto a owl:Ontology ;
          rdfs:label ?title .
}

template :hierarchy {
    "<ul>"
    st:call-template(:root-item)
    "</ul>"
} where {}

template :root-item {
    st:call-template(:class-item, ?c)
} where {
    ?c a rdfs:Class
    filter not exists { ?c rdfs:subClassOf ?sc }
}

template :class-item(?class) {
    format {
        "<li class=\"toc\">%s%s</li>"
        st:call-template(:ref, ?class)
        st:call-template(:subclasses, ?class)
    }
} where {
    ?class a rdfs:Class .
}

template :subclasses(?class) {
    "<ul>"
    st:call-template(:subclass-list, ?class)
    "</ul>"
} where {
    ?class a rdfs:Class
    filter exists { ?sc rdfs:subClassOf ?class }
}

template :subclass-list(?class) {
    st:call-template(:class-item, ?sc)
} where {
    ?sc rdfs:subClassOf ?class .
}

template :definitions {
    format { "<div id=\"%s\" class=\"def\">" st:call-template(:id, ?c) }
    format { "<h1>%s</h1>" ?l }
    format { "<span>%s</span>" str(?c) }
    format { "<p>%s</p>" st:call-template(:def, ?c) }
    "<p>In the domain of:</p>"
    "<table>"
    "<tr>"
    "<th>Property</th>"
    "<th>Value Type</th>"
    "<th>Definition</th>"
    "</tr>"
    format { "%s" st:call-template(:domain, ?c) }
    "</table>"
    "<p>In the range of:</p>"
    "<table>"
    "<tr>"
    "<th>Property</th>"
    "<th>For Type</th>"
    "<th>Definition</th>"
    "</tr>"
    format { "%s" st:call-template(:range, ?c) }
    "</table>"
    "</div>"
} where {
    ?c a rdfs:Class ;
       rdfs:label ?l .
}

template :domain(?class) {
    "<tr>"
    format { "<td>%s</td>" st:call-template(:ref, ?p) }
    format { "<td>%s</td>" st:call-template(:ref, ?val) }
    format { "<td>%s</td>" st:call-template(:def, ?p) }
    "</tr>"
} where {
    ?p a rdf:Property ;
       schema:domainIncludes ?class ;
       schema:rangeIncludes ?val .
}

template :range(?class) {
    "<tr>"
    format { "<td>%s</td>" st:call-template(:ref, ?p) }
    format { "<td>%s</td>" st:call-template(:ref, ?val) }
    format { "<td>%s</td>" st:call-template(:def, ?p) }
    "</tr>"
} where {
    ?p schema:domainIncludes ?val ;
       schema:rangeIncludes ?class .
}

template :ref(?entity) {
    format { "<a href=\"%s\">%s</a>" concat("#", st:call-template(:id, ?entity)) ?l }
} where {
    ?entity rdfs:label ?l .
}

template :id(?class) {
    format { "%s" strafter(str(?class), "#") }
} where {}

template :def(?entity) {
    format { "%s" ?def }
} where {
    optional { ?entity rdfs:comment ?comment }
    bind (if(bound(?comment), ?comment, "<i>No definition</i>") as ?def)
}