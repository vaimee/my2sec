{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,mCAAqE;AAErE,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,kBAAU,CAAS,EAAE,CAAC,CAAC;QACvB,kBAAU,CAAS,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,MAAM,GAAG,kBAAU,CAAC,EAAE,CAAC,CAAC;QAE9B,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAG3B,SAAS,WAAW,CAAC,KAAqB;YACxC,QAAQ,KAAK,EAAE;gBACb,KAAK,GAAG;oBACN,OAAO,IAAI,CAAC;gBACd,KAAK,GAAG;oBACN,OAAO,IAAI,CAAC;gBACd;oBACE,OAAO,mBAAW,CAAC,KAAK,CAAC,CAAC;aAC7B;QACH,CAAC;QAED,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,kBAAU,CAAqD,IAAI,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,CAAC,mBAAW,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,kBAAU,CAAsB,IAAI,CAAC,CAAC;YACtC,kBAAU,CAAsB,KAAK,CAAC,CAAC;YACvC,kBAAU,CAAyB,IAAI,CAAC,CAAC;YACzC,kBAAU,CAAyB,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,kBAAU,CAAsB,IAAI,CAAC,CAAC;YACtC,kBAAU,CAAyB,KAAK,CAAC,CAAC;YAC1C,kBAAU,CAAyB,KAAK,CAAC,CAAC;YAC1C,kBAAU,CAA4B,IAAI,CAAC,CAAC;YAE5C,kBAAU,CAAyB,KAAK,CAAC,CAAC;YAC1C,kBAAU,CAA4B,KAAK,CAAC,CAAC;YAE7C,kBAAU,CAAsB,KAAK,CAAC,CAAC;YACvC,kBAAU,CAA0B,IAAI,CAAC,CAAC;YAE1C,kBAAU,CAA0B,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,kBAAU,CAA0B,KAAK,CAAC,CAAC;YAC3C,kBAAU,CAAyB,KAAK,CAAC,CAAC;YAC1C,kBAAU,CAAyB,KAAK,CAAC,CAAC;YAC1C,kBAAU,CAA0B,KAAK,CAAC,CAAC;YAC3C,kBAAU,CAA+C,KAAK,CAAC,CAAC;YAChE,kBAAU,CAAwB,KAAK,CAAC,CAAC;YACzC,kBAAU,CAAsB,IAAI,CAAC,CAAC;YAEtC,kBAAU,CAA2C,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expectType, expectNever, TypeOf, TypeEqual } from \"./index\";\n\ndescribe(\"ts expect\", () => {\n  it(\"should expect types\", () => {\n    expectType<string>(\"\");\n    expectType<number>(123);\n  });\n\n  it(\"should return void\", () => {\n    const result = expectType(\"\");\n\n    expect(result).toEqual(undefined);\n  });\n\n  describe(\"expectNever\", () => {\n    type SupportedValue = \"a\" | \"b\";\n\n    function doSomething(value: SupportedValue): boolean {\n      switch (value) {\n        case \"a\":\n          return true;\n        case \"b\":\n          return true;\n        default:\n          return expectNever(value);\n      }\n    }\n\n    it(\"should support exhaustive check\", () => {\n      expectType<TypeEqual<boolean, ReturnType<typeof doSomething>>>(true);\n    });\n\n    it(\"should throw if called\", () => {\n      expect(expectNever).toThrowError(TypeError);\n    });\n  });\n\n  describe(\"TypeOf\", () => {\n    it(\"should support type of checks\", () => {\n      expectType<TypeOf<number, 123>>(true);\n      expectType<TypeOf<123, number>>(false);\n      expectType<TypeOf<string, \"test\">>(true);\n      expectType<TypeOf<\"test\", string>>(false);\n    });\n  });\n\n  describe(\"TypeEqual\", () => {\n    it(\"should check types are equal\", () => {\n      expectType<TypeEqual<123, 123>>(true);\n      expectType<TypeEqual<123, number>>(false);\n      expectType<TypeEqual<number, 123>>(false);\n      expectType<TypeEqual<number, number>>(true);\n\n      expectType<TypeEqual<false, true>>(false);\n      expectType<TypeEqual<false, boolean>>(false);\n\n      expectType<TypeEqual<1 | 2, 1>>(false);\n      expectType<TypeEqual<1 | 2, 1 | 2>>(true);\n\n      expectType<TypeEqual<never, never>>(true);\n    });\n\n    it(\"should check for `any` type\", () => {\n      expectType<TypeEqual<any, unknown>>(false);\n      expectType<TypeEqual<any, string>>(false);\n      expectType<TypeEqual<any, number>>(false);\n      expectType<TypeEqual<any, boolean>>(false);\n      expectType<TypeEqual<any, Record<PropertyKey, unknown>>>(false);\n      expectType<TypeEqual<any, never>>(false);\n      expectType<TypeEqual<any, any>>(true);\n\n      expectType<TypeEqual<TypeEqual<string, any>, false>>(true);\n    });\n  });\n});\n"]}