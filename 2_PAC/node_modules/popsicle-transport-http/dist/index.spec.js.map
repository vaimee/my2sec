{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from \"path\";\nimport { readFileSync, createReadStream } from \"fs\";\nimport { Request, AbortController } from \"servie/dist/node\";\nimport type { Socket, AddressInfo } from \"net\";\nimport { promisify } from \"util\";\nimport {\n  transport,\n  SocketConnectionManager,\n  NegotiateHttpVersion,\n  defaultHttp2Connect,\n  defaultTlsConnect,\n  defaultNetConnect,\n  ConnectionError,\n  CausedByTimeoutError,\n  HttpResponse,\n} from \"./index\";\nimport {\n  server as httpServer,\n  tlsServer as httpsServer,\n} from \"./test-server/http\";\nimport {\n  server as http2Server,\n  tlsServer as http2TlsServer,\n} from \"./test-server/http2\";\n\nconst ca = readFileSync(join(__dirname, \"./test-server/support/ca-crt.pem\"));\nconst wait = promisify(setTimeout);\n\ndescribe(\"popsicle transport http\", () => {\n  const httpAddress = httpServer.listen(0).address() as AddressInfo;\n  const httpsAddress = httpsServer.listen(0).address() as AddressInfo;\n  const http2Address = http2Server.listen(0).address() as AddressInfo;\n  const http2TlsAddress = http2TlsServer.listen(0).address() as AddressInfo;\n\n  const TEST_HTTP_URL = `http://localhost:${httpAddress.port}`;\n  const TEST_HTTPS_URL = `https://localhost:${httpsAddress.port}`;\n  const TEST_HTTP2_URL = `http://localhost:${http2Address.port}`;\n  const TEST_HTTP2_TLS_URL = `https://localhost:${http2TlsAddress.port}`;\n  const ALL_URLS = [\n    TEST_HTTP_URL,\n    TEST_HTTPS_URL,\n    TEST_HTTP2_URL,\n    TEST_HTTP2_TLS_URL,\n  ];\n\n  afterAll(() => {\n    httpServer.close();\n    httpsServer.close();\n    http2Server.close();\n    http2TlsServer.close();\n  });\n\n  const done = () => {\n    throw new TypeError(\"Invalid request\");\n  };\n\n  it(\"should return 2xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/204`),\n      done\n    );\n\n    expect(res.ok).toEqual(true);\n    expect(res.status).toEqual(204);\n    expect(res.statusText).toEqual(\"No Content\");\n  });\n\n  it(\"should return 4xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/404`),\n      done\n    );\n\n    expect(res.ok).toEqual(false);\n    expect(res.status).toEqual(404);\n    expect(res.statusText).toEqual(\"Not Found\");\n  });\n\n  it(\"should return 5xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/500`),\n      done\n    );\n\n    expect(res.ok).toEqual(false);\n    expect(res.status).toEqual(500);\n    expect(res.statusText).toEqual(\"Internal Server Error\");\n  });\n\n  it(\"should send path without query\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/url`);\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"/url\");\n  });\n\n  it(\"should send query params\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/url?test=true`);\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"/url?test=true\");\n  });\n\n  it(\"should send post data\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: \"example data\",\n      headers: {\n        \"content-type\": \"application/octet-stream\",\n      },\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.text()).toEqual(\"example data\");\n  });\n\n  it(\"should send arraybuffer\", async () => {\n    const buffer = new ArrayBuffer(3);\n\n    const body = new Uint8Array(buffer);\n    body.set([1, 2, 3]);\n\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: buffer,\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.arrayBuffer()).toEqual(buffer);\n  });\n\n  it(\"should send stream data\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: createReadStream(join(__dirname, \"../README.md\")),\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.text()).toContain(\"Popsicle Transport HTTP\");\n  });\n\n  it(\"should abort before it starts\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      signal: controller.signal,\n    });\n\n    controller.abort();\n\n    expect.assertions(1);\n\n    try {\n      await transport()(req, done);\n    } catch (err) {\n      if (err instanceof Error) {\n        expect(err.message).toEqual(\"Request has been aborted\");\n      }\n    }\n  });\n\n  it(\"should abort mid-request\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/download`, controller);\n\n    const spy = jest.fn();\n    req.signal.on(\"responseBytes\", spy);\n\n    const res = await transport()(req, done);\n\n    setTimeout(() => controller.abort(), 100);\n\n    expect(await res.text()).toEqual(\"hello \");\n    expect(spy).toBeCalledWith(6);\n  });\n\n  it(\"should abort mid-request with http2\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP2_TLS_URL}/download`, controller);\n\n    const spy = jest.fn();\n    req.signal.on(\"responseBytes\", spy);\n\n    const res = await transport({ rejectUnauthorized: false })(req, done);\n\n    setTimeout(() => controller.abort(), 100);\n\n    expect(await res.text()).toEqual(\"hello \");\n    expect(spy).toBeCalledWith(6);\n  });\n\n  it(\"should have no side effects aborting twice\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/download`, controller);\n\n    expect.assertions(1);\n\n    controller.abort();\n    controller.abort();\n\n    try {\n      await transport()(req, done);\n    } catch (err) {\n      if (err instanceof Error) {\n        expect(err.message).toEqual(\"Request has been aborted\");\n      }\n    }\n  });\n\n  it(\"should emit download progress\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/download`);\n\n    const spy = jest.fn();\n    req.signal.on(\"responseBytes\", spy);\n\n    const res = await transport()(req, done);\n    expect(await res.text()).toEqual(\"hello world!\");\n    expect(spy).toBeCalledWith(12);\n  });\n\n  it(\"should re-use net socket\", async () => {\n    const createNetConnection = jest.fn(defaultNetConnect);\n\n    const send = transport({\n      createNetConnection,\n    });\n\n    const req = new Request(TEST_HTTP_URL);\n\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n    expect(await res1.text()).toEqual(\"Success\");\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n    expect(await res2.text()).toEqual(\"Success\");\n\n    expect(createNetConnection).toBeCalledTimes(1);\n  });\n\n  it(\"should re-use net socket on free\", async () => {\n    const netSockets = new SocketConnectionManager<Socket>(Infinity, 1);\n    const createNetConnection = jest.fn(defaultNetConnect);\n\n    const send = transport({\n      netSockets,\n      createNetConnection,\n    });\n\n    const req = new Request(TEST_HTTP_URL);\n    const [res1, res2] = await Promise.all([send(req, done), send(req, done)]);\n\n    expect(res1.status).toEqual(200);\n    expect(res2.status).toEqual(200);\n    expect(createNetConnection).toBeCalledTimes(1);\n  });\n\n  it(\"should discard net socket at max connection\", async () => {\n    const netSockets = new SocketConnectionManager<Socket>(0);\n    const createNetConnection = jest.fn(defaultNetConnect);\n\n    const send = transport({\n      createNetConnection,\n      netSockets,\n    });\n\n    const req = new Request(TEST_HTTP_URL);\n\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n    expect(await res1.text()).toEqual(\"Success\");\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n    expect(await res2.text()).toEqual(\"Success\");\n\n    expect(createNetConnection).toBeCalledTimes(2);\n  });\n\n  it(\"should create new socket without keep alive\", async () => {\n    const createNetConnection = jest.fn(defaultNetConnect);\n\n    const send = transport({\n      keepAlive: -1,\n      createNetConnection,\n    });\n\n    const req = new Request(TEST_HTTP_URL);\n\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n    expect(await res1.text()).toEqual(\"Success\");\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n    expect(await res2.text()).toEqual(\"Success\");\n\n    expect(createNetConnection).toBeCalledTimes(2);\n  });\n\n  it(\"should create new socket on free without keep alive\", async () => {\n    const netSockets = new SocketConnectionManager<Socket>(Infinity, 1);\n    const createNetConnection = jest.fn(defaultNetConnect);\n\n    const send = transport({\n      keepAlive: -1,\n      netSockets,\n      createNetConnection,\n    });\n\n    const req = new Request(TEST_HTTP_URL);\n    const [res1, res2] = await Promise.all([send(req, done), send(req, done)]);\n\n    expect(res1.status).toEqual(200);\n    expect(res2.status).toEqual(200);\n    expect(createNetConnection).toBeCalledTimes(2);\n  });\n\n  it(\"should reject https unauthorized\", async () => {\n    expect.assertions(1);\n\n    try {\n      await transport()(new Request(TEST_HTTPS_URL), done);\n    } catch (err) {\n      if (err instanceof ConnectionError) {\n        expect(err.code).toEqual(\"EUNAVAILABLE\");\n      }\n    }\n  });\n\n  it.skip(\"should support https ca option\", async () => {\n    const req = new Request(TEST_HTTPS_URL);\n    const res = await transport({ ca })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should support disabling reject unauthorized\", async () => {\n    const req = new Request(TEST_HTTPS_URL);\n    const res = await transport({ rejectUnauthorized: false })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should re-use tls socket\", async () => {\n    const createTlsConnection = jest.fn(defaultTlsConnect);\n\n    const send = transport({\n      rejectUnauthorized: false,\n      createTlsConnection,\n    });\n\n    const req = new Request(TEST_HTTPS_URL);\n\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n    expect(await res1.text()).toEqual(\"Success\");\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n    expect(await res2.text()).toEqual(\"Success\");\n\n    expect(createTlsConnection).toBeCalledTimes(1);\n  });\n\n  it(\"should connect to http2 non-tls server\", async () => {\n    const req = new Request(TEST_HTTP2_URL);\n    const res = await transport({\n      negotiateHttpVersion: NegotiateHttpVersion.HTTP2_ONLY,\n    })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should connect to http2 server\", async () => {\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const res = await transport({ rejectUnauthorized: false })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should connect to http2 server using http2 only\", async () => {\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const res = await transport({\n      rejectUnauthorized: false,\n      negotiateHttpVersion: NegotiateHttpVersion.HTTP2_ONLY,\n    })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should connect to https server using http1 only\", async () => {\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const res = await transport({\n      rejectUnauthorized: false,\n      negotiateHttpVersion: NegotiateHttpVersion.HTTP1_ONLY,\n    })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect((res as HttpResponse).httpVersion).toEqual(\"1.1\");\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should re-use http2 client\", async () => {\n    const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n    const send = transport({\n      rejectUnauthorized: false,\n      createHttp2Connection,\n    });\n\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n\n    expect(createHttp2Connection).toBeCalledTimes(1);\n  });\n\n  it(\"should re-use http2 client without tls\", async () => {\n    const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n    const send = transport({\n      createHttp2Connection,\n      negotiateHttpVersion: NegotiateHttpVersion.HTTP2_ONLY,\n    });\n\n    const req = new Request(TEST_HTTP2_URL);\n    const res1 = await send(req, done);\n    expect(res1.status).toEqual(200);\n\n    const res2 = await send(req, done);\n    expect(res2.status).toEqual(200);\n\n    expect(createHttp2Connection).toBeCalledTimes(1);\n  });\n\n  it(\"should re-use connection to http2 server\", async () => {\n    const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n    const send = transport({\n      rejectUnauthorized: false,\n      createHttp2Connection,\n    });\n\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const [res1, res2] = await Promise.all([send(req, done), send(req, done)]);\n\n    expect(res1.status).toEqual(200);\n    expect(res2.status).toEqual(200);\n    expect(createHttp2Connection).toBeCalledTimes(1);\n  });\n\n  it(\"should allow custom dns lookup for http requests\", async () => {\n    const lookup = jest.fn((hostname, options, callback) =>\n      callback(null, \"127.0.0.1\", 4)\n    );\n\n    const send = transport({\n      rejectUnauthorized: false,\n      lookup,\n    });\n\n    const req = new Request(`${TEST_HTTP_URL}/status/200`);\n    const res = await send(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(lookup).toBeCalledTimes(1);\n  });\n\n  it(\"should allow custom dns lookup for https requests\", async () => {\n    const lookup = jest.fn((hostname, options, callback) =>\n      callback(null, \"127.0.0.1\", 4)\n    );\n\n    const send = transport({\n      rejectUnauthorized: false,\n      lookup,\n    });\n\n    const req = new Request(`${TEST_HTTPS_URL}/status/200`);\n    const res = await send(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(lookup).toBeCalledTimes(1);\n  });\n\n  it(\"should allow custom dns lookup for http2 requests\", async () => {\n    const lookup = jest.fn((hostname, options, callback) =>\n      callback(null, \"127.0.0.1\", 4)\n    );\n\n    const send = transport({\n      rejectUnauthorized: false,\n      lookup,\n    });\n\n    const req = new Request(TEST_HTTP2_TLS_URL);\n    const res = await send(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(lookup).toBeCalledTimes(1);\n  });\n\n  for (const url of ALL_URLS) {\n    it(`should handle connection issues to ${url}`, async () => {\n      expect.assertions(1);\n\n      try {\n        await transport({\n          rejectUnauthorized: false,\n          negotiateHttpVersion:\n            url === TEST_HTTP2_URL\n              ? NegotiateHttpVersion.HTTP2_ONLY\n              : undefined,\n        })(new Request(`${url}/close`), done);\n      } catch (err) {\n        if (err instanceof ConnectionError) {\n          expect(err.code).toEqual(\"EUNAVAILABLE\");\n        }\n      }\n    });\n\n    it(`should handle request timeouts to ${url}`, async () => {\n      const createNetConnection = jest.fn(defaultNetConnect);\n      const createTlsConnection = jest.fn(defaultTlsConnect);\n      const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n      const send = transport({\n        idleRequestTimeout: 50,\n        rejectUnauthorized: false,\n        negotiateHttpVersion:\n          url === TEST_HTTP2_URL || url === TEST_HTTP2_TLS_URL\n            ? NegotiateHttpVersion.HTTP2_ONLY\n            : undefined,\n        createNetConnection,\n        createTlsConnection,\n        createHttp2Connection,\n      });\n\n      expect.assertions(5);\n\n      try {\n        await send(new Request(`${url}/timeout`), done);\n      } catch (err) {\n        if (err instanceof ConnectionError) {\n          expect(err.code).toEqual(\"EUNAVAILABLE\");\n          expect(err.cause).toBeInstanceOf(CausedByTimeoutError);\n        }\n      }\n\n      // Test connection re-use from previous step without timeout.\n      const res = await send(new Request(url), done);\n\n      expect(await res.text()).toEqual(\"Success\");\n\n      switch (url) {\n        case TEST_HTTP2_TLS_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createTlsConnection).toBeCalledTimes(1);\n          break;\n        case TEST_HTTP2_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createNetConnection).toBeCalledTimes(1);\n          break;\n        case TEST_HTTPS_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createTlsConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTP_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createNetConnection).toBeCalledTimes(2);\n          break;\n      }\n    });\n\n    it(`should handle socket timeouts to ${url}`, async () => {\n      const createNetConnection = jest.fn(defaultNetConnect);\n      const createTlsConnection = jest.fn(defaultTlsConnect);\n      const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n      const send = transport({\n        idleSocketTimeout: 50,\n        rejectUnauthorized: false,\n        negotiateHttpVersion:\n          url === TEST_HTTP2_URL || url === TEST_HTTP2_TLS_URL\n            ? NegotiateHttpVersion.HTTP2_ONLY\n            : undefined,\n        createNetConnection,\n        createTlsConnection,\n        createHttp2Connection,\n      });\n\n      expect.assertions(4);\n\n      const res1 = await send(new Request(url), done);\n      expect(await res1.text()).toEqual(\"Success\");\n\n      // Node.js v10 has trouble with the timeout being executed on time here.\n      await wait(process.version.startsWith(\"v10.\") ? 51 : 50);\n\n      const res2 = await send(new Request(url), done);\n      expect(await res2.text()).toEqual(\"Success\");\n\n      switch (url) {\n        case TEST_HTTP2_TLS_URL:\n          expect((res2 as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createTlsConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTP2_URL:\n          expect((res2 as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createNetConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTPS_URL:\n          expect((res2 as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createTlsConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTP_URL:\n          expect((res2 as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createNetConnection).toBeCalledTimes(2);\n          break;\n      }\n    });\n\n    it(`should handle socket timeouts during a request to ${url}`, async () => {\n      const createNetConnection = jest.fn(defaultNetConnect);\n      const createTlsConnection = jest.fn(defaultTlsConnect);\n      const createHttp2Connection = jest.fn(defaultHttp2Connect);\n\n      const send = transport({\n        idleSocketTimeout: 50,\n        rejectUnauthorized: false,\n        negotiateHttpVersion:\n          url === TEST_HTTP2_URL || url === TEST_HTTP2_TLS_URL\n            ? NegotiateHttpVersion.HTTP2_ONLY\n            : undefined,\n        createNetConnection,\n        createTlsConnection,\n        createHttp2Connection,\n      });\n\n      expect.assertions(5);\n\n      try {\n        await send(new Request(`${url}/timeout`), done);\n      } catch (err) {\n        if (err instanceof ConnectionError) {\n          expect(err.code).toEqual(\"EUNAVAILABLE\");\n          expect(err.cause).toBeInstanceOf(CausedByTimeoutError);\n        }\n      }\n\n      // Test connection re-use from previous step without timeout.\n      const res = await send(new Request(url), done);\n\n      expect(await res.text()).toEqual(\"Success\");\n\n      switch (url) {\n        case TEST_HTTP2_TLS_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createTlsConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTP2_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"2.0\");\n          expect(createNetConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTPS_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createTlsConnection).toBeCalledTimes(2);\n          break;\n        case TEST_HTTP_URL:\n          expect((res as HttpResponse).httpVersion).toEqual(\"1.1\");\n          expect(createNetConnection).toBeCalledTimes(2);\n          break;\n      }\n    });\n  }\n});\n"]}